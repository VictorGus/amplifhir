["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/copy-to-clipboard/index.js"],"~:js","shadow$provide.module$node_modules$copy_to_clipboard$index=function(global,require,module,exports){function format(message){var copyKey=(/mac os x/i.test(navigator.userAgent)?\"⌘\":\"Ctrl\")+\"+C\";return message.replace(/#{\\s*key\\s*}/g,copyKey)}var deselectCurrent=require(\"module$node_modules$toggle_selection$index\"),clipboardToIE11Formatting={\"text/plain\":\"Text\",\"text/html\":\"Url\",\"default\":\"Text\"};module.exports=function(text,options){var success=!1;options||(options={});var debug=options.debug||!1;try{var reselectPrevious=\ndeselectCurrent();var range=document.createRange();var selection=document.getSelection();var mark=document.createElement(\"span\");mark.textContent=text;mark.style.all=\"unset\";mark.style.position=\"fixed\";mark.style.top=0;mark.style.clip=\"rect(0, 0, 0, 0)\";mark.style.whiteSpace=\"pre\";mark.style.webkitUserSelect=\"text\";mark.style.MozUserSelect=\"text\";mark.style.msUserSelect=\"text\";mark.style.userSelect=\"text\";mark.addEventListener(\"copy\",function(e){e.stopPropagation();options.format&&(e.preventDefault(),\n\"undefined\"===typeof e.clipboardData?(debug&&console.warn(\"unable to use e.clipboardData\"),debug&&console.warn(\"trying IE specific stuff\"),window.clipboardData.clearData(),window.clipboardData.setData(clipboardToIE11Formatting[options.format]||clipboardToIE11Formatting[\"default\"],text)):(e.clipboardData.clearData(),e.clipboardData.setData(options.format,text)));options.onCopy&&(e.preventDefault(),options.onCopy(e.clipboardData))});document.body.appendChild(mark);range.selectNodeContents(mark);selection.addRange(range);\nif(!document.execCommand(\"copy\"))throw Error(\"copy command was unsuccessful\");success=!0}catch(err$jscomp$0){debug&&console.error(\"unable to copy using execCommand: \",err$jscomp$0);debug&&console.warn(\"trying IE specific stuff\");try{window.clipboardData.setData(options.format||\"text\",text),options.onCopy&&options.onCopy(window.clipboardData),success=!0}catch(err){debug&&console.error(\"unable to copy using clipboardData: \",err);debug&&console.error(\"falling back to prompt\");var message=format(\"message\"in\noptions?options.message:\"Copy to clipboard: #{key}, Enter\");window.prompt(message,text)}}finally{selection&&(\"function\"==typeof selection.removeRange?selection.removeRange(range):selection.removeAllRanges()),mark&&document.body.removeChild(mark),reselectPrevious()}return success}}","~:source","shadow$provide[\"module$node_modules$copy_to_clipboard$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$toggle_selection$index"]],"~:properties",["^5",["top","whiteSpace","clip","msUserSelect","textContent","userSelect","position","all","MozUserSelect","webkitUserSelect"]],"~:compiled-at",1619101950078,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$copy_to_clipboard$index.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/copy-to-clipboard/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$copy_to_clipboard$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar deselectCurrent = require(\\\"toggle-selection\\\");\\n\\nvar clipboardToIE11Formatting = {\\n  \\\"text/plain\\\": \\\"Text\\\",\\n  \\\"text/html\\\": \\\"Url\\\",\\n  \\\"default\\\": \\\"Text\\\"\\n}\\n\\nvar defaultMessage = \\\"Copy to clipboard: #{key}, Enter\\\";\\n\\nfunction format(message) {\\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \\\"\\u2318\\\" : \\\"Ctrl\\\") + \\\"+C\\\";\\n  return message.replace(/#{\\\\s*key\\\\s*}/g, copyKey);\\n}\\n\\nfunction copy(text, options) {\\n  var debug,\\n    message,\\n    reselectPrevious,\\n    range,\\n    selection,\\n    mark,\\n    success = false;\\n  if (!options) {\\n    options = {};\\n  }\\n  debug = options.debug || false;\\n  try {\\n    reselectPrevious = deselectCurrent();\\n\\n    range = document.createRange();\\n    selection = document.getSelection();\\n\\n    mark = document.createElement(\\\"span\\\");\\n    mark.textContent = text;\\n    // reset user styles for span element\\n    mark.style.all = \\\"unset\\\";\\n    // prevents scrolling to the end of the page\\n    mark.style.position = \\\"fixed\\\";\\n    mark.style.top = 0;\\n    mark.style.clip = \\\"rect(0, 0, 0, 0)\\\";\\n    // used to preserve spaces and line breaks\\n    mark.style.whiteSpace = \\\"pre\\\";\\n    // do not inherit user-select (it may be `none`)\\n    mark.style.webkitUserSelect = \\\"text\\\";\\n    mark.style.MozUserSelect = \\\"text\\\";\\n    mark.style.msUserSelect = \\\"text\\\";\\n    mark.style.userSelect = \\\"text\\\";\\n    mark.addEventListener(\\\"copy\\\", function(e) {\\n      e.stopPropagation();\\n      if (options.format) {\\n        e.preventDefault();\\n        if (typeof e.clipboardData === \\\"undefined\\\") { // IE 11\\n          debug && console.warn(\\\"unable to use e.clipboardData\\\");\\n          debug && console.warn(\\\"trying IE specific stuff\\\");\\n          window.clipboardData.clearData();\\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\\\"default\\\"]\\n          window.clipboardData.setData(format, text);\\n        } else { // all other browsers\\n          e.clipboardData.clearData();\\n          e.clipboardData.setData(options.format, text);\\n        }\\n      }\\n      if (options.onCopy) {\\n        e.preventDefault();\\n        options.onCopy(e.clipboardData);\\n      }\\n    });\\n\\n    document.body.appendChild(mark);\\n\\n    range.selectNodeContents(mark);\\n    selection.addRange(range);\\n\\n    var successful = document.execCommand(\\\"copy\\\");\\n    if (!successful) {\\n      throw new Error(\\\"copy command was unsuccessful\\\");\\n    }\\n    success = true;\\n  } catch (err) {\\n    debug && console.error(\\\"unable to copy using execCommand: \\\", err);\\n    debug && console.warn(\\\"trying IE specific stuff\\\");\\n    try {\\n      window.clipboardData.setData(options.format || \\\"text\\\", text);\\n      options.onCopy && options.onCopy(window.clipboardData);\\n      success = true;\\n    } catch (err) {\\n      debug && console.error(\\\"unable to copy using clipboardData: \\\", err);\\n      debug && console.error(\\\"falling back to prompt\\\");\\n      message = format(\\\"message\\\" in options ? options.message : defaultMessage);\\n      window.prompt(message, text);\\n    }\\n  } finally {\\n    if (selection) {\\n      if (typeof selection.removeRange == \\\"function\\\") {\\n        selection.removeRange(range);\\n      } else {\\n        selection.removeAllRanges();\\n      }\\n    }\\n\\n    if (mark) {\\n      document.body.removeChild(mark);\\n    }\\n    reselectPrevious();\\n  }\\n\\n  return success;\\n}\\n\\nmodule.exports = copy;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"format\",\"message\",\"copyKey\",\"test\",\"navigator\",\"userAgent\",\"replace\",\"deselectCurrent\",\"clipboardToIE11Formatting\",\"copy\",\"text\",\"options\",\"success\",\"debug\",\"reselectPrevious\",\"range\",\"document\",\"createRange\",\"selection\",\"getSelection\",\"mark\",\"createElement\",\"textContent\",\"style\",\"all\",\"position\",\"top\",\"clip\",\"whiteSpace\",\"webkitUserSelect\",\"MozUserSelect\",\"msUserSelect\",\"userSelect\",\"addEventListener\",\"e\",\"stopPropagation\",\"preventDefault\",\"clipboardData\",\"console\",\"warn\",\"window\",\"clearData\",\"setData\",\"onCopy\",\"body\",\"appendChild\",\"selectNodeContents\",\"addRange\",\"successful\",\"execCommand\",\"Error\",\"err\",\"error\",\"defaultMessage\",\"prompt\",\"removeRange\",\"removeAllRanges\",\"removeChild\"]\n}\n"]