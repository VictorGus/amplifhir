["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rc-tree/lib/utils/treeUtil.js"],"~:js","shadow$provide.module$node_modules$rc_tree$lib$utils$treeUtil=function(global,require,module,exports){function getKey(key,pos){return null!==key&&void 0!==key?key:pos}function traverseDataNodes(dataNodes,callback,config){function processNode(node,index,parent){var children=node?node[childrenPropName]:dataNodes,pos=node?(0,_util.getPosition)(parent.pos,index):\"0\";if(node){var key=syntheticGetKey(node,pos);callback({node,index,pos,key,parentPos:parent.node?parent.pos:null,level:parent.level+1})}children&&\nchildren.forEach(function(subNode,subIndex){processNode(subNode,subIndex,{node,pos,level:parent?parent.level+1:-1})})}var externalGetKey=null,configType=(0,_typeof2.default)(config);if(\"function\"===configType||\"string\"===configType)externalGetKey=config;else if(config&&\"object\"===configType){var childrenPropName=config.childrenPropName;externalGetKey=config.externalGetKey}childrenPropName=childrenPropName||\"children\";var syntheticGetKey;externalGetKey?\"string\"===typeof externalGetKey?syntheticGetKey=\nfunction(node){return node[externalGetKey]}:\"function\"===typeof externalGetKey&&(syntheticGetKey=function(node){return externalGetKey(node)}):syntheticGetKey=function(node,pos){return getKey(node.key,pos)};processNode(null)}global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getKey=getKey;exports.warningWithoutKey=function(){function dig(list){var path=1<arguments.length&&void 0!==arguments[1]?arguments[1]:\n\"\";(list||[]).forEach(function(treeNode){var key=treeNode.key;treeNode=treeNode.children;(0,_warning.default)(null!==key&&void 0!==key,\"Tree node must have a certain key: [\".concat(path).concat(key,\"]\"));var recordKey=String(key);(0,_warning.default)(!keys.has(recordKey)||null===key||void 0===key,\"Same 'key' exist in the Tree: \".concat(recordKey));keys.set(recordKey,!0);dig(treeNode,\"\".concat(path).concat(recordKey,\" \\x3e \"))})}var treeData=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],\nkeys=new Map;dig(treeData)};exports.convertTreeToData=function(rootNodes){function dig(node){return(0,_toArray.default)(node).map(function(treeNode){if(!(0,_util.isTreeNode)(treeNode))return(0,_warning.default)(!treeNode,\"Tree/TreeNode can only accept TreeNode as children.\"),null;var key=treeNode.key,_treeNode$props=treeNode.props;treeNode=_treeNode$props.children;_treeNode$props=(0,_objectWithoutProperties2.default)(_treeNode$props,[\"children\"]);key=(0,_objectSpread2.default)({key},_treeNode$props);\ntreeNode=dig(treeNode);treeNode.length&&(key.children=treeNode);return key}).filter(function(dataNode){return dataNode})}return dig(rootNodes)};exports.flattenTreeData=function(){function dig(list){var parent=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return list.map(function(treeNode,index){var pos=(0,_util.getPosition)(parent?parent.pos:\"0\",index),mergedKey=getKey(treeNode.key,pos);index=(0,_objectSpread2.default)((0,_objectSpread2.default)({},treeNode),{},{parent,pos,children:null,\ndata:treeNode,isStart:[].concat((0,_toConsumableArray2.default)(parent?parent.isStart:[]),[0===index]),isEnd:[].concat((0,_toConsumableArray2.default)(parent?parent.isEnd:[]),[index===list.length-1])});flattenList.push(index);!0===expandedKeys||expandedKeySet.has(mergedKey)?index.children=dig(treeNode.children||[],index):index.children=[];return index})}var treeNodeList=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],expandedKeys=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],\nexpandedKeySet=new Set(!0===expandedKeys?[]:expandedKeys),flattenList=[];dig(treeNodeList);return flattenList};exports.traverseDataNodes=traverseDataNodes;exports.convertDataToEntities=function(dataNodes){var _ref=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},initWrapper=_ref.initWrapper,processEntity=_ref.processEntity,onProcessFinished=_ref.onProcessFinished,childrenPropName=_ref.childrenPropName,legacyExternalGetKey=2<arguments.length?arguments[2]:void 0;_ref=_ref.externalGetKey||legacyExternalGetKey;\nvar posEntities={},keyEntities={},wrapper={posEntities,keyEntities};initWrapper&&(wrapper=initWrapper(wrapper)||wrapper);traverseDataNodes(dataNodes,function(item){var pos=item.pos,key=item.key,parentPos=item.parentPos;item={node:item.node,index:item.index,key,pos,level:item.level};key=getKey(key,pos);posEntities[pos]=item;keyEntities[key]=item;item.parent=posEntities[parentPos];item.parent&&(item.parent.children=item.parent.children||[],item.parent.children.push(item));processEntity&&processEntity(item,\nwrapper)},{externalGetKey:_ref,childrenPropName});onProcessFinished&&onProcessFinished(wrapper);return wrapper};exports.getTreeNodeProps=function(key,_ref2){var selectedKeys=_ref2.selectedKeys,loadedKeys=_ref2.loadedKeys,loadingKeys=_ref2.loadingKeys,checkedKeys=_ref2.checkedKeys,halfCheckedKeys=_ref2.halfCheckedKeys,dragOverNodeKey=_ref2.dragOverNodeKey,dropPosition=_ref2.dropPosition,entity=_ref2.keyEntities[key];return{eventKey:key,expanded:-1!==_ref2.expandedKeys.indexOf(key),selected:-1!==selectedKeys.indexOf(key),\nloaded:-1!==loadedKeys.indexOf(key),loading:-1!==loadingKeys.indexOf(key),checked:-1!==checkedKeys.indexOf(key),halfChecked:-1!==halfCheckedKeys.indexOf(key),pos:String(entity?entity.pos:\"\"),dragOver:dragOverNodeKey===key&&0===dropPosition,dragOverGapTop:dragOverNodeKey===key&&-1===dropPosition,dragOverGapBottom:dragOverNodeKey===key&&1===dropPosition}};exports.convertNodePropsToEventData=function(props){var data=props.data,expanded=props.expanded,selected=props.selected,checked=props.checked,loaded=\nprops.loaded,loading=props.loading,halfChecked=props.halfChecked,dragOver=props.dragOver,dragOverGapTop=props.dragOverGapTop,dragOverGapBottom=props.dragOverGapBottom,pos=props.pos,active=props.active;data=(0,_objectSpread2.default)((0,_objectSpread2.default)({},data),{},{expanded,selected,checked,loaded,loading,halfChecked,dragOver,dragOverGapTop,dragOverGapBottom,pos,active});\"props\"in data||Object.defineProperty(data,\"props\",{get:function(){(0,_warning.default)(!1,\"Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.\");\nreturn props}});return data};var _typeof2=global(require(\"module$node_modules$$babel$runtime$helpers$typeof\")),_toConsumableArray2=global(require(\"module$node_modules$$babel$runtime$helpers$toConsumableArray\")),_objectSpread2=global(require(\"module$node_modules$$babel$runtime$helpers$objectSpread2\")),_objectWithoutProperties2=global(require(\"module$node_modules$$babel$runtime$helpers$objectWithoutProperties\")),_toArray=global(require(\"module$node_modules$rc_util$lib$Children$toArray\")),_warning=global(require(\"module$node_modules$rc_util$lib$warning\")),\n_util=require(\"module$node_modules$rc_tree$lib$util\")}","~:source","shadow$provide[\"module$node_modules$rc_tree$lib$utils$treeUtil\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, [\"children\"]);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  // Init config\n  var externalGetKey = null;\n  var childrenPropName;\n  var configType = (0, _typeof2.default)(config);\n\n  if (configType === 'function' || configType === 'string') {\n    // Legacy getKey param\n    externalGetKey = config;\n  } else if (config && configType === 'object') {\n    childrenPropName = config.childrenPropName;\n    externalGetKey = config.externalGetKey;\n  }\n\n  childrenPropName = childrenPropName || 'children'; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent) {\n    var children = node ? node[childrenPropName] : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished,\n      externalGetKey = _ref.externalGetKey,\n      childrenPropName = _ref.childrenPropName;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$rc_util$lib$Children$toArray","~$module$node_modules$rc_tree$lib$util","~$shadow.js","~$module$node_modules$$babel$runtime$helpers$toConsumableArray","~$module$node_modules$$babel$runtime$helpers$objectSpread2","~$module$node_modules$rc_util$lib$warning","~$module$node_modules$$babel$runtime$helpers$objectWithoutProperties","~$module$node_modules$$babel$runtime$helpers$typeof"]],"~:properties",["^5",["convertNodePropsToEventData","selected","pos","halfChecked","parentPos","index","eventKey","loaded","isEnd","key","parent","children","__esModule","getKey","externalGetKey","loading","posEntities","isStart","level","dragOverGapTop","value","keyEntities","childrenPropName","convertDataToEntities","warningWithoutKey","props","convertTreeToData","dragOverGapBottom","flattenTreeData","traverseDataNodes","active","data","expanded","get","checked","node","dragOver","getTreeNodeProps"]],"~:compiled-at",1619101949969,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rc_tree$lib$utils$treeUtil.js\",\n\"lineCount\":14,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/rc-tree/lib/utils/treeUtil.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rc_tree$lib$utils$treeUtil\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.getKey = getKey;\\nexports.warningWithoutKey = warningWithoutKey;\\nexports.convertTreeToData = convertTreeToData;\\nexports.flattenTreeData = flattenTreeData;\\nexports.traverseDataNodes = traverseDataNodes;\\nexports.convertDataToEntities = convertDataToEntities;\\nexports.getTreeNodeProps = getTreeNodeProps;\\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\\n\\nvar _typeof2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/typeof\\\"));\\n\\nvar _toConsumableArray2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/toConsumableArray\\\"));\\n\\nvar _objectSpread2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/objectSpread2\\\"));\\n\\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/objectWithoutProperties\\\"));\\n\\nvar _toArray = _interopRequireDefault(require(\\\"rc-util/lib/Children/toArray\\\"));\\n\\nvar _warning = _interopRequireDefault(require(\\\"rc-util/lib/warning\\\"));\\n\\nvar _util = require(\\\"../util\\\");\\n\\nfunction getKey(key, pos) {\\n  if (key !== null && key !== undefined) {\\n    return key;\\n  }\\n\\n  return pos;\\n}\\n/**\\n * Warning if TreeNode do not provides key\\n */\\n\\n\\nfunction warningWithoutKey() {\\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\\n  var keys = new Map();\\n\\n  function dig(list) {\\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\\n    (list || []).forEach(function (treeNode) {\\n      var key = treeNode.key,\\n          children = treeNode.children;\\n      (0, _warning.default)(key !== null && key !== undefined, \\\"Tree node must have a certain key: [\\\".concat(path).concat(key, \\\"]\\\"));\\n      var recordKey = String(key);\\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \\\"Same 'key' exist in the Tree: \\\".concat(recordKey));\\n      keys.set(recordKey, true);\\n      dig(children, \\\"\\\".concat(path).concat(recordKey, \\\" > \\\"));\\n    });\\n  }\\n\\n  dig(treeData);\\n}\\n/**\\n * Convert `children` of Tree into `treeData` structure.\\n */\\n\\n\\nfunction convertTreeToData(rootNodes) {\\n  function dig(node) {\\n    var treeNodes = (0, _toArray.default)(node);\\n    return treeNodes.map(function (treeNode) {\\n      // Filter invalidate node\\n      if (!(0, _util.isTreeNode)(treeNode)) {\\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\\n        return null;\\n      }\\n\\n      var key = treeNode.key;\\n      var _treeNode$props = treeNode.props,\\n          children = _treeNode$props.children,\\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, [\\\"children\\\"]);\\n      var dataNode = (0, _objectSpread2.default)({\\n        key: key\\n      }, rest);\\n      var parsedChildren = dig(children);\\n\\n      if (parsedChildren.length) {\\n        dataNode.children = parsedChildren;\\n      }\\n\\n      return dataNode;\\n    }).filter(function (dataNode) {\\n      return dataNode;\\n    });\\n  }\\n\\n  return dig(rootNodes);\\n}\\n/**\\n * Flat nest tree data into flatten list. This is used for virtual list render.\\n * @param treeNodeList Origin data node list\\n * @param expandedKeys\\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\\n */\\n\\n\\nfunction flattenTreeData() {\\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\\n  var flattenList = [];\\n\\n  function dig(list) {\\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\\n    return list.map(function (treeNode, index) {\\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\\n\\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, treeNode), {}, {\\n        parent: parent,\\n        pos: pos,\\n        children: null,\\n        data: treeNode,\\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\\n      });\\n      flattenList.push(flattenNode); // Loop treeNode children\\n\\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\\n      } else {\\n        flattenNode.children = [];\\n      }\\n\\n      return flattenNode;\\n    });\\n  }\\n\\n  dig(treeNodeList);\\n  return flattenList;\\n}\\n/**\\n * Traverse all the data by `treeData`.\\n * Please not use it out of the `rc-tree` since we may refactor this code.\\n */\\n\\n\\nfunction traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\\nconfig) {\\n  // Init config\\n  var externalGetKey = null;\\n  var childrenPropName;\\n  var configType = (0, _typeof2.default)(config);\\n\\n  if (configType === 'function' || configType === 'string') {\\n    // Legacy getKey param\\n    externalGetKey = config;\\n  } else if (config && configType === 'object') {\\n    childrenPropName = config.childrenPropName;\\n    externalGetKey = config.externalGetKey;\\n  }\\n\\n  childrenPropName = childrenPropName || 'children'; // Get keys\\n\\n  var syntheticGetKey;\\n\\n  if (externalGetKey) {\\n    if (typeof externalGetKey === 'string') {\\n      syntheticGetKey = function syntheticGetKey(node) {\\n        return node[externalGetKey];\\n      };\\n    } else if (typeof externalGetKey === 'function') {\\n      syntheticGetKey = function syntheticGetKey(node) {\\n        return externalGetKey(node);\\n      };\\n    }\\n  } else {\\n    syntheticGetKey = function syntheticGetKey(node, pos) {\\n      return getKey(node.key, pos);\\n    };\\n  } // Process\\n\\n\\n  function processNode(node, index, parent) {\\n    var children = node ? node[childrenPropName] : dataNodes;\\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\\n\\n    if (node) {\\n      var key = syntheticGetKey(node, pos);\\n      var data = {\\n        node: node,\\n        index: index,\\n        pos: pos,\\n        key: key,\\n        parentPos: parent.node ? parent.pos : null,\\n        level: parent.level + 1\\n      };\\n      callback(data);\\n    } // Process children node\\n\\n\\n    if (children) {\\n      children.forEach(function (subNode, subIndex) {\\n        processNode(subNode, subIndex, {\\n          node: node,\\n          pos: pos,\\n          level: parent ? parent.level + 1 : -1\\n        });\\n      });\\n    }\\n  }\\n\\n  processNode(null);\\n}\\n/**\\n * Convert `treeData` into entity records.\\n */\\n\\n\\nfunction convertDataToEntities(dataNodes) {\\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n      initWrapper = _ref.initWrapper,\\n      processEntity = _ref.processEntity,\\n      onProcessFinished = _ref.onProcessFinished,\\n      externalGetKey = _ref.externalGetKey,\\n      childrenPropName = _ref.childrenPropName;\\n\\n  var\\n  /** @deprecated Use `config.externalGetKey` instead */\\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\\n  // Init config\\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\\n  var posEntities = {};\\n  var keyEntities = {};\\n  var wrapper = {\\n    posEntities: posEntities,\\n    keyEntities: keyEntities\\n  };\\n\\n  if (initWrapper) {\\n    wrapper = initWrapper(wrapper) || wrapper;\\n  }\\n\\n  traverseDataNodes(dataNodes, function (item) {\\n    var node = item.node,\\n        index = item.index,\\n        pos = item.pos,\\n        key = item.key,\\n        parentPos = item.parentPos,\\n        level = item.level;\\n    var entity = {\\n      node: node,\\n      index: index,\\n      key: key,\\n      pos: pos,\\n      level: level\\n    };\\n    var mergedKey = getKey(key, pos);\\n    posEntities[pos] = entity;\\n    keyEntities[mergedKey] = entity; // Fill children\\n\\n    entity.parent = posEntities[parentPos];\\n\\n    if (entity.parent) {\\n      entity.parent.children = entity.parent.children || [];\\n      entity.parent.children.push(entity);\\n    }\\n\\n    if (processEntity) {\\n      processEntity(entity, wrapper);\\n    }\\n  }, {\\n    externalGetKey: mergedExternalGetKey,\\n    childrenPropName: childrenPropName\\n  });\\n\\n  if (onProcessFinished) {\\n    onProcessFinished(wrapper);\\n  }\\n\\n  return wrapper;\\n}\\n/**\\n * Get TreeNode props with Tree props.\\n */\\n\\n\\nfunction getTreeNodeProps(key, _ref2) {\\n  var expandedKeys = _ref2.expandedKeys,\\n      selectedKeys = _ref2.selectedKeys,\\n      loadedKeys = _ref2.loadedKeys,\\n      loadingKeys = _ref2.loadingKeys,\\n      checkedKeys = _ref2.checkedKeys,\\n      halfCheckedKeys = _ref2.halfCheckedKeys,\\n      dragOverNodeKey = _ref2.dragOverNodeKey,\\n      dropPosition = _ref2.dropPosition,\\n      keyEntities = _ref2.keyEntities;\\n  var entity = keyEntities[key];\\n  var treeNodeProps = {\\n    eventKey: key,\\n    expanded: expandedKeys.indexOf(key) !== -1,\\n    selected: selectedKeys.indexOf(key) !== -1,\\n    loaded: loadedKeys.indexOf(key) !== -1,\\n    loading: loadingKeys.indexOf(key) !== -1,\\n    checked: checkedKeys.indexOf(key) !== -1,\\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\\n    pos: String(entity ? entity.pos : ''),\\n    // [Legacy] Drag props\\n    // Since the interaction of drag is changed, the semantic of the props are\\n    // not accuracy, I think it should be finally removed\\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\\n  };\\n  return treeNodeProps;\\n}\\n\\nfunction convertNodePropsToEventData(props) {\\n  var data = props.data,\\n      expanded = props.expanded,\\n      selected = props.selected,\\n      checked = props.checked,\\n      loaded = props.loaded,\\n      loading = props.loading,\\n      halfChecked = props.halfChecked,\\n      dragOver = props.dragOver,\\n      dragOverGapTop = props.dragOverGapTop,\\n      dragOverGapBottom = props.dragOverGapBottom,\\n      pos = props.pos,\\n      active = props.active;\\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\\n    expanded: expanded,\\n    selected: selected,\\n    checked: checked,\\n    loaded: loaded,\\n    loading: loading,\\n    halfChecked: halfChecked,\\n    dragOver: dragOver,\\n    dragOverGapTop: dragOverGapTop,\\n    dragOverGapBottom: dragOverGapBottom,\\n    pos: pos,\\n    active: active\\n  });\\n\\n  if (!('props' in eventData)) {\\n    Object.defineProperty(eventData, 'props', {\\n      get: function get() {\\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\\n        return props;\\n      }\\n    });\\n  }\\n\\n  return eventData;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getKey\",\"key\",\"pos\",\"undefined\",\"traverseDataNodes\",\"dataNodes\",\"callback\",\"config\",\"processNode\",\"node\",\"index\",\"parent\",\"children\",\"childrenPropName\",\"_util\",\"getPosition\",\"syntheticGetKey\",\"data\",\"parentPos\",\"level\",\"forEach\",\"subNode\",\"subIndex\",\"externalGetKey\",\"configType\",\"_typeof2\",\"default\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"warningWithoutKey\",\"dig\",\"list\",\"path\",\"arguments\",\"length\",\"treeNode\",\"_warning\",\"concat\",\"recordKey\",\"String\",\"keys\",\"has\",\"set\",\"treeData\",\"Map\",\"convertTreeToData\",\"rootNodes\",\"treeNodes\",\"_toArray\",\"map\",\"isTreeNode\",\"_treeNode$props\",\"props\",\"rest\",\"_objectWithoutProperties2\",\"dataNode\",\"_objectSpread2\",\"parsedChildren\",\"filter\",\"flattenTreeData\",\"mergedKey\",\"flattenNode\",\"isStart\",\"_toConsumableArray2\",\"isEnd\",\"flattenList\",\"push\",\"expandedKeys\",\"expandedKeySet\",\"treeNodeList\",\"Set\",\"convertDataToEntities\",\"_ref\",\"initWrapper\",\"processEntity\",\"onProcessFinished\",\"legacyExternalGetKey\",\"mergedExternalGetKey\",\"posEntities\",\"keyEntities\",\"wrapper\",\"item\",\"entity\",\"getTreeNodeProps\",\"_ref2\",\"selectedKeys\",\"loadedKeys\",\"loadingKeys\",\"checkedKeys\",\"halfCheckedKeys\",\"dragOverNodeKey\",\"dropPosition\",\"treeNodeProps\",\"eventKey\",\"expanded\",\"indexOf\",\"selected\",\"loaded\",\"loading\",\"checked\",\"halfChecked\",\"dragOver\",\"dragOverGapTop\",\"dragOverGapBottom\",\"convertNodePropsToEventData\",\"active\",\"eventData\",\"get\"]\n}\n"]