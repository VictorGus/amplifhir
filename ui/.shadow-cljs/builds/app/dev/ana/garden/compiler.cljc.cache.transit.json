["^ ","~:output",["^ ","~:js","goog.provide('garden.compiler');\n/**\n * The current compiler flags.\n */\ngarden.compiler._STAR_flags_STAR_ = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"pretty-print?\",\"pretty-print?\",1932217158),true,new cljs.core.Keyword(null,\"preamble\",\"preamble\",1641040241),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"output-to\",\"output-to\",-965533968),null,new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"auto-prefix\",\"auto-prefix\",1484803466),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(null,\"media-expressions\",\"media-expressions\",1920421643),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"nesting-behavior\",\"nesting-behavior\",-1555995755),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)], null)], null);\n/**\n * Retun a function to call when rendering a media expression.\n *   The returned function accepts two arguments: the media\n *   expression being evaluated and the current media expression context.\n *   Both arguments are maps. This is used to provide semantics for nested\n *   media queries.\n */\ngarden.compiler.media_expression_behavior = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),(function (expr,context){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([context,expr], 0));\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (expr,_){\nreturn expr;\n})], null);\n/**\n * The current parent selector context.\n */\ngarden.compiler._STAR_selector_context_STAR_ = null;\n/**\n * The current media query context.\n */\ngarden.compiler._STAR_media_query_context_STAR_ = null;\n/**\n * Return the current list of browser vendors specified in `*flags*`.\n */\ngarden.compiler.vendors = (function garden$compiler$vendors(){\nreturn cljs.core.seq(new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496).cljs$core$IFn$_invoke$arity$1(garden.compiler._STAR_flags_STAR_));\n});\n/**\n * Return the current list of auto-prefixed properties specified in `*flags*`.\n */\ngarden.compiler.auto_prefixed_properties = (function garden$compiler$auto_prefixed_properties(){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.name,new cljs.core.Keyword(null,\"auto-prefix\",\"auto-prefix\",1484803466).cljs$core$IFn$_invoke$arity$1(garden.compiler._STAR_flags_STAR_)));\n});\ngarden.compiler.auto_prefix_QMARK_ = (function garden$compiler$auto_prefix_QMARK_(property){\nreturn cljs.core.contains_QMARK_(garden.compiler.auto_prefixed_properties(),property);\n});\ngarden.compiler.top_level_expression_QMARK_ = (function garden$compiler$top_level_expression_QMARK_(x){\nvar or__4131__auto__ = (garden.util.rule_QMARK_.cljs$core$IFn$_invoke$arity$1 ? garden.util.rule_QMARK_.cljs$core$IFn$_invoke$arity$1(x) : garden.util.rule_QMARK_.call(null,x));\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn ((garden.util.at_import_QMARK_(x)) || (garden.util.at_media_QMARK_(x)) || (garden.util.at_keyframes_QMARK_(x)));\n}\n});\n/**\n * Return a vector of [(filter pred coll) (remove pred coll)].\n */\ngarden.compiler.divide_vec = (function garden$compiler$divide_vec(pred,coll){\nreturn cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(cljs.core.filter,cljs.core.remove)(pred,coll);\n});\n\n/**\n * @interface\n */\ngarden.compiler.IExpandable = function(){};\n\n/**\n * Return a list containing the expanded form of `this`.\n */\ngarden.compiler.expand = (function garden$compiler$expand(this$){\nif((((!((this$ == null)))) && ((!((this$.garden$compiler$IExpandable$expand$arity$1 == null)))))){\nreturn this$.garden$compiler$IExpandable$expand$arity$1(this$);\n} else {\nvar x__4433__auto__ = (((this$ == null))?null:this$);\nvar m__4434__auto__ = (garden.compiler.expand[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4434__auto__.call(null,this$));\n} else {\nvar m__4431__auto__ = (garden.compiler.expand[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4431__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"IExpandable.expand\",this$);\n}\n}\n}\n});\n\n/**\n * Like flatten but only affects seqs.\n */\ngarden.compiler.expand_seqs = (function garden$compiler$expand_seqs(coll){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (x){\nif(cljs.core.seq_QMARK_(x)){\nreturn (garden.compiler.expand_seqs.cljs$core$IFn$_invoke$arity$1 ? garden.compiler.expand_seqs.cljs$core$IFn$_invoke$arity$1(x) : garden.compiler.expand_seqs.call(null,x));\n} else {\nreturn (new cljs.core.List(null,x,null,(1),null));\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([coll], 0));\n});\ngarden.compiler.expand_declaration_1 = (function garden$compiler$expand_declaration_1(declaration){\nif(cljs.core.map_QMARK_(declaration)){\n} else {\nthrow (new Error(\"Assert failed: (map? declaration)\"));\n}\n\nvar prefix = (function (p1__56106_SHARP_,p2__56107_SHARP_){\nreturn garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p1__56106_SHARP_,\"-\",p2__56107_SHARP_], 0));\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (prefix){\nreturn (function (m,p__56108){\nvar vec__56109 = p__56108;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56109,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56109,(1),null);\nif(garden.util.hash_map_QMARK_(v)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__56109,k,v,prefix){\nreturn (function (m1,p__56112){\nvar vec__56113 = p__56112;\nvar k1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56113,(0),null);\nvar v1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56113,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m1,prefix(k,k1),v1);\n});})(vec__56109,k,v,prefix))\n,m,(garden.compiler.expand_declaration_1.cljs$core$IFn$_invoke$arity$1 ? garden.compiler.expand_declaration_1.cljs$core$IFn$_invoke$arity$1(v) : garden.compiler.expand_declaration_1.call(null,v)));\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,garden.util.to_str(k),v);\n}\n});})(prefix))\n,cljs.core.empty(declaration),declaration);\n});\ngarden.compiler.expand_declaration = (function garden$compiler$expand_declaration(declaration){\nif(cljs.core.empty_QMARK_(declaration)){\nreturn declaration;\n} else {\nreturn cljs.core.with_meta(garden.compiler.expand_declaration_1(declaration),cljs.core.meta(declaration));\n}\n});\n/**\n * Matches a single \"&\" or \"&\" follow by one or more\n *   non-whitespace characters.\n */\ngarden.compiler.parent_selector_re = /^&(?:\\S+)?$/;\n/**\n * Extract the selector portion of a parent selector reference.\n */\ngarden.compiler.extract_reference = (function garden$compiler$extract_reference(selector){\nvar temp__5720__auto__ = cljs.core.re_find(garden.compiler.parent_selector_re,garden.util.to_str(cljs.core.last(selector)));\nif(cljs.core.truth_(temp__5720__auto__)){\nvar reference = temp__5720__auto__;\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(reference));\n} else {\nreturn null;\n}\n});\ngarden.compiler.expand_selector_reference = (function garden$compiler$expand_selector_reference(selector){\nvar temp__5718__auto__ = garden.compiler.extract_reference(selector);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar reference = temp__5718__auto__;\nvar parent = cljs.core.butlast(selector);\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.butlast(parent),(new cljs.core.List(null,garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.last(parent),reference], 0)),null,(1),null)));\n} else {\nreturn selector;\n}\n});\ngarden.compiler.expand_selector = (function garden$compiler$expand_selector(selector,parent){\nvar selector__$1 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.selectors.css_selector,selector);\nvar selector__$2 = ((cljs.core.seq(parent))?cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.flatten,garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([parent,selector__$1], 0))):cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.list,selector__$1));\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.expand_selector_reference,selector__$2);\n});\ngarden.compiler.expand_rule = (function garden$compiler$expand_rule(rule){\nvar vec__56116 = cljs.core.split_with(garden.selectors.selector_QMARK_,rule);\nvar selector = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56116,(0),null);\nvar children = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56116,(1),null);\nvar selector__$1 = garden.compiler.expand_selector(selector,garden.compiler._STAR_selector_context_STAR_);\nvar children__$1 = garden.compiler.expand(children);\nvar vec__56119 = garden.compiler.divide_vec(garden.util.declaration_QMARK_,children__$1);\nvar declarations = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56119,(0),null);\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56119,(1),null);\nvar ys = (function (){var _STAR_selector_context_STAR__orig_val__56122 = garden.compiler._STAR_selector_context_STAR_;\nvar _STAR_selector_context_STAR__temp_val__56123 = ((cljs.core.seq(selector__$1))?selector__$1:garden.compiler._STAR_selector_context_STAR_);\ngarden.compiler._STAR_selector_context_STAR_ = _STAR_selector_context_STAR__temp_val__56123;\n\ntry{return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(garden.compiler.expand,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([xs], 0)));\n}finally {garden.compiler._STAR_selector_context_STAR_ = _STAR_selector_context_STAR__orig_val__56122;\n}})();\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ys,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector__$1], null),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(garden.compiler.expand,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([declarations], 0))));\n});\nif((typeof garden !== 'undefined') && (typeof garden.compiler !== 'undefined') && (typeof garden.compiler.expand_at_rule !== 'undefined')){\n} else {\ngarden.compiler.expand_at_rule = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__56124 = cljs.core.get_global_hierarchy;\nreturn (fexpr__56124.cljs$core$IFn$_invoke$arity$0 ? fexpr__56124.cljs$core$IFn$_invoke$arity$0() : fexpr__56124.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"garden.compiler\",\"expand-at-rule\"),new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\ngarden.compiler.expand_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (at_rule){\nreturn (new cljs.core.List(null,at_rule,null,(1),null));\n}));\ngarden.compiler.expand_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"keyframes\",\"keyframes\",-1437976012),(function (p__56125){\nvar map__56126 = p__56125;\nvar map__56126__$1 = (((((!((map__56126 == null))))?(((((map__56126.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56126.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56126):map__56126);\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56126__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nvar map__56128 = value;\nvar map__56128__$1 = (((((!((map__56128 == null))))?(((((map__56128.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56128.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56128):map__56128);\nvar identifier = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56128__$1,new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498));\nvar frames = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56128__$1,new cljs.core.Keyword(null,\"frames\",\"frames\",1765687497));\nreturn (new cljs.core.List(null,(new garden.types.CSSAtRule(new cljs.core.Keyword(null,\"keyframes\",\"keyframes\",-1437976012),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498),garden.util.to_str(identifier),new cljs.core.Keyword(null,\"frames\",\"frames\",1765687497),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(garden.compiler.expand,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([frames], 0))], null),null,null,null)),null,(1),null));\n}));\ngarden.compiler.expand_media_query_expression = (function garden$compiler$expand_media_query_expression(expression){\nvar temp__5718__auto__ = (function (){var G__56130 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(garden.compiler._STAR_flags_STAR_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"media-expressions\",\"media-expressions\",1920421643),new cljs.core.Keyword(null,\"nesting-behavior\",\"nesting-behavior\",-1555995755)], null));\nreturn (garden.compiler.media_expression_behavior.cljs$core$IFn$_invoke$arity$1 ? garden.compiler.media_expression_behavior.cljs$core$IFn$_invoke$arity$1(G__56130) : garden.compiler.media_expression_behavior.call(null,G__56130));\n})();\nif(cljs.core.truth_(temp__5718__auto__)){\nvar f = temp__5718__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(expression,garden.compiler._STAR_media_query_context_STAR_) : f.call(null,expression,garden.compiler._STAR_media_query_context_STAR_));\n} else {\nreturn expression;\n}\n});\ngarden.compiler.expand_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"media\",\"media\",-1066138403),(function (p__56131){\nvar map__56132 = p__56131;\nvar map__56132__$1 = (((((!((map__56132 == null))))?(((((map__56132.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56132.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56132):map__56132);\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56132__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nvar map__56134 = value;\nvar map__56134__$1 = (((((!((map__56134 == null))))?(((((map__56134.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56134.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56134):map__56134);\nvar media_queries = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56134__$1,new cljs.core.Keyword(null,\"media-queries\",\"media-queries\",-1563277678));\nvar rules = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56134__$1,new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366));\nvar media_queries__$1 = garden.compiler.expand_media_query_expression(media_queries);\nvar xs = (function (){var _STAR_media_query_context_STAR__orig_val__56139 = garden.compiler._STAR_media_query_context_STAR_;\nvar _STAR_media_query_context_STAR__temp_val__56140 = media_queries__$1;\ngarden.compiler._STAR_media_query_context_STAR_ = _STAR_media_query_context_STAR__temp_val__56140;\n\ntry{return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(garden.compiler.expand,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([garden.compiler.expand(rules)], 0)));\n}finally {garden.compiler._STAR_media_query_context_STAR_ = _STAR_media_query_context_STAR__orig_val__56139;\n}})();\nvar vec__56135 = garden.compiler.divide_vec(garden.util.at_media_QMARK_,xs);\nvar subqueries = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56135,(0),null);\nvar rules__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56135,(1),null);\nreturn cljs.core.cons((new garden.types.CSSAtRule(new cljs.core.Keyword(null,\"media\",\"media\",-1066138403),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"media-queries\",\"media-queries\",-1563277678),media_queries__$1,new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366),rules__$1], null),null,null,null)),subqueries);\n}));\ngarden.compiler.expand_stylesheet = (function garden$compiler$expand_stylesheet(xs){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.expand,garden.compiler.expand(xs)));\n});\ngoog.object.set(garden.compiler.IExpandable,\"null\",true);\n\ngoog.object.set(garden.compiler.expand,\"null\",(function (this$){\nreturn null;\n}));\n\ncljs.core.IndexedSeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.IndexedSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.LazySeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.LazySeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.NodeSeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.NodeSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.BlackNode.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.BlackNode.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_rule(this$__$1);\n});\n\ncljs.core.PersistentArrayMapSeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentArrayMapSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.ChunkedSeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.ChunkedSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.Cons.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.Cons.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.RSeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.RSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ngarden.types.CSSFunction.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.types.CSSFunction.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn (new cljs.core.List(null,this$__$1,null,(1),null));\n});\n\ncljs.core.PersistentHashMap.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentHashMap.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn (new cljs.core.List(null,garden.compiler.expand_declaration(this$__$1),null,(1),null));\n});\n\ncljs.core.ArrayNodeSeq.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.ArrayNodeSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ncljs.core.Subvec.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.Subvec.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_rule(this$__$1);\n});\n\ngoog.object.set(garden.compiler.IExpandable,\"_\",true);\n\ngoog.object.set(garden.compiler.expand,\"_\",(function (this$){\nreturn (new cljs.core.List(null,this$,null,(1),null));\n}));\n\ncljs.core.PersistentTreeMap.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentTreeMap.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn (new cljs.core.List(null,garden.compiler.expand_declaration(this$__$1),null,(1),null));\n});\n\ncljs.core.ChunkedCons.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.ChunkedCons.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\ngarden.types.CSSAtRule.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.types.CSSAtRule.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_at_rule.cljs$core$IFn$_invoke$arity$1(this$__$1);\n});\n\ncljs.core.RedNode.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.RedNode.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_rule(this$__$1);\n});\n\ncljs.core.PersistentVector.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentVector.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_rule(this$__$1);\n});\n\ncljs.core.PersistentArrayMap.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentArrayMap.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn (new cljs.core.List(null,garden.compiler.expand_declaration(this$__$1),null,(1),null));\n});\n\ngarden.color.CSSColor.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.color.CSSColor.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn (new cljs.core.List(null,this$__$1,null,(1),null));\n});\n\ncljs.core.List.prototype.garden$compiler$IExpandable$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.List.prototype.garden$compiler$IExpandable$expand$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.expand_seqs(this$__$1);\n});\n\n/**\n * @interface\n */\ngarden.compiler.CSSRenderer = function(){};\n\n/**\n * Convert a Clojure data type in to a string of CSS.\n */\ngarden.compiler.render_css = (function garden$compiler$render_css(this$){\nif((((!((this$ == null)))) && ((!((this$.garden$compiler$CSSRenderer$render_css$arity$1 == null)))))){\nreturn this$.garden$compiler$CSSRenderer$render_css$arity$1(this$);\n} else {\nvar x__4433__auto__ = (((this$ == null))?null:this$);\nvar m__4434__auto__ = (garden.compiler.render_css[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4434__auto__.call(null,this$));\n} else {\nvar m__4431__auto__ = (garden.compiler.render_css[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4431__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"CSSRenderer.render-css\",this$);\n}\n}\n}\n});\n\ngarden.compiler.comma = \", \";\ngarden.compiler.colon = \": \";\ngarden.compiler.semicolon = \";\";\ngarden.compiler.l_brace = \" {\\n\";\ngarden.compiler.r_brace = \"\\n}\";\ngarden.compiler.l_brace_1 = \" {\\n\\n\";\ngarden.compiler.r_brace_1 = \"\\n\\n}\";\ngarden.compiler.rule_sep = \"\\n\\n\";\ngarden.compiler.indent = \"  \";\n/**\n * Return a space separated list of values.\n */\ngarden.compiler.space_separated_list = (function garden$compiler$space_separated_list(var_args){\nvar G__56142 = arguments.length;\nswitch (G__56142) {\ncase 1:\nreturn garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ngarden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$1 = (function (xs){\nreturn garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,xs);\n});\n\ngarden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2 = (function (f,xs){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,xs));\n});\n\ngarden.compiler.space_separated_list.cljs$lang$maxFixedArity = 2;\n\n/**\n * Return a comma separated list of values. Subsequences are joined with\n * spaces.\n */\ngarden.compiler.comma_separated_list = (function garden$compiler$comma_separated_list(var_args){\nvar G__56144 = arguments.length;\nswitch (G__56144) {\ncase 1:\nreturn garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ngarden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1 = (function (xs){\nreturn garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,xs);\n});\n\ngarden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$2 = (function (f,xs){\nvar ys = (function (){var iter__4523__auto__ = (function garden$compiler$iter__56145(s__56146){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__56146__$1 = s__56146;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__56146__$1);\nif(temp__5720__auto__){\nvar s__56146__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__56146__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__56146__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__56148 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__56147 = (0);\nwhile(true){\nif((i__56147 < size__4522__auto__)){\nvar x = cljs.core._nth(c__4521__auto__,i__56147);\ncljs.core.chunk_append(b__56148,((cljs.core.sequential_QMARK_(x))?garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2(f,x):(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x))));\n\nvar G__56260 = (i__56147 + (1));\ni__56147 = G__56260;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__56148),garden$compiler$iter__56145(cljs.core.chunk_rest(s__56146__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__56148),null);\n}\n} else {\nvar x = cljs.core.first(s__56146__$2);\nreturn cljs.core.cons(((cljs.core.sequential_QMARK_(x))?garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2(f,x):(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x))),garden$compiler$iter__56145(cljs.core.rest(s__56146__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4523__auto__(xs);\n})();\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(garden.compiler.comma,ys);\n});\n\ngarden.compiler.comma_separated_list.cljs$lang$maxFixedArity = 2;\n\ngarden.compiler.rule_join = (function garden$compiler$rule_join(xs){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(garden.compiler.rule_sep,xs);\n});\n/**\n * Match the start of a line if the characters immediately\n *   after it are spaces or used in a CSS id (#), class (.), or tag name.\n */\ngarden.compiler.indent_loc_re = (new RegExp(\"(?=[ A-Za-z#.}-]+)^\",\"gm\"));\ngarden.compiler.indent_str = (function garden$compiler$indent_str(s){\nreturn s.replace(garden.compiler.indent_loc_re,garden.compiler.indent);\n});\n/**\n * Render the value portion of a declaration.\n */\ngarden.compiler.render_value = (function garden$compiler$render_value(x){\nif(garden.util.at_keyframes_QMARK_(x)){\nreturn garden.util.to_str(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498)], null)));\n} else {\nreturn garden.compiler.render_css(x);\n}\n});\ngarden.compiler.render_property_and_value = (function garden$compiler$render_property_and_value(p__56149){\nvar vec__56150 = p__56149;\nvar prop = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56150,(0),null);\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56150,(1),null);\nif(cljs.core.set_QMARK_(val)){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_property_and_value,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(prop),val))));\n} else {\nvar val__$1 = ((cljs.core.sequential_QMARK_(val))?garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_value,val):garden.compiler.render_value(val));\nreturn garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([prop,garden.compiler.colon,val__$1,garden.compiler.semicolon], 0));\n}\n});\n/**\n * For each block in `declaration`, add sequence of blocks\n * returned from calling `f` on the block.\n */\ngarden.compiler.add_blocks = (function garden$compiler$add_blocks(f,declaration){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__56153_SHARP_){\nreturn cljs.core.cons(p1__56153_SHARP_,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__56153_SHARP_) : f.call(null,p1__56153_SHARP_)));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([declaration], 0));\n});\n/**\n * Sequence of blocks with their properties prefixed by\n * each vendor in `vendors`.\n */\ngarden.compiler.prefixed_blocks = (function garden$compiler$prefixed_blocks(vendors,p__56154){\nvar vec__56155 = p__56154;\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56155,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56155,(1),null);\nvar iter__4523__auto__ = ((function (vec__56155,p,v){\nreturn (function garden$compiler$prefixed_blocks_$_iter__56158(s__56159){\nreturn (new cljs.core.LazySeq(null,((function (vec__56155,p,v){\nreturn (function (){\nvar s__56159__$1 = s__56159;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__56159__$1);\nif(temp__5720__auto__){\nvar s__56159__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__56159__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__56159__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__56161 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__56160 = (0);\nwhile(true){\nif((i__56160 < size__4522__auto__)){\nvar vendor = cljs.core._nth(c__4521__auto__,i__56160);\ncljs.core.chunk_append(b__56161,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.util.vendor_prefix(vendor,cljs.core.name(p)),v], null));\n\nvar G__56280 = (i__56160 + (1));\ni__56160 = G__56280;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__56161),garden$compiler$prefixed_blocks_$_iter__56158(cljs.core.chunk_rest(s__56159__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__56161),null);\n}\n} else {\nvar vendor = cljs.core.first(s__56159__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.util.vendor_prefix(vendor,cljs.core.name(p)),v], null),garden$compiler$prefixed_blocks_$_iter__56158(cljs.core.rest(s__56159__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(vec__56155,p,v))\n,null,null));\n});})(vec__56155,p,v))\n;\nreturn iter__4523__auto__(vendors);\n});\n/**\n * Add prefixes to all blocks in `declaration` using\n * vendor prefixes in `vendors`.\n */\ngarden.compiler.prefix_all_properties = (function garden$compiler$prefix_all_properties(vendors,declaration){\nreturn garden.compiler.add_blocks(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(garden.compiler.prefixed_blocks,vendors),declaration);\n});\n/**\n * Add prefixes to all blocks in `declaration` when property\n * is in the `:auto-prefix` set.\n */\ngarden.compiler.prefix_auto_properties = (function garden$compiler$prefix_auto_properties(vendors,declaration){\nreturn garden.compiler.add_blocks((function (block){\nvar vec__56162 = block;\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56162,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56162,(1),null);\nif(garden.compiler.auto_prefix_QMARK_(cljs.core.name(p))){\nreturn garden.compiler.prefixed_blocks(vendors,block);\n} else {\nreturn null;\n}\n}),declaration);\n});\n/**\n * Prefix properties within a `declaration` if `{:prefix true}` is\n * set in its meta, or if a property is in the `:auto-prefix` set.\n */\ngarden.compiler.prefix_declaration = (function garden$compiler$prefix_declaration(declaration){\nvar vendors = (function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(declaration));\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn garden.compiler.vendors();\n}\n})();\nvar prefix_fn = (cljs.core.truth_(new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(declaration)))?garden.compiler.prefix_all_properties:garden.compiler.prefix_auto_properties);\nreturn (prefix_fn.cljs$core$IFn$_invoke$arity$2 ? prefix_fn.cljs$core$IFn$_invoke$arity$2(vendors,declaration) : prefix_fn.call(null,vendors,declaration));\n});\ngarden.compiler.render_declaration = (function garden$compiler$render_declaration(declaration){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_property_and_value,garden.compiler.prefix_declaration(declaration)));\n});\ngarden.compiler.render_selector = (function garden$compiler$render_selector(selector){\nreturn garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1(selector);\n});\n/**\n * Convert a vector to a CSS rule string. The vector is expected to be\n *   fully expanded.\n */\ngarden.compiler.render_rule = (function garden$compiler$render_rule(p__56165){\nvar vec__56166 = p__56165;\nvar selector = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56166,(0),null);\nvar declarations = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56166,(1),null);\nvar rule = vec__56166;\nif(((cljs.core.seq(rule)) && (cljs.core.every_QMARK_(cljs.core.seq,rule)))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(garden.compiler.render_selector(selector)),garden.compiler.l_brace,cljs.core.str.cljs$core$IFn$_invoke$arity$1(garden.compiler.indent_str(clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,declarations)))),garden.compiler.r_brace].join('');\n} else {\nreturn null;\n}\n});\n/**\n * Render the individual components of a media expression.\n */\ngarden.compiler.render_media_expr_part = (function garden$compiler$render_media_expr_part(p__56169){\nvar vec__56170 = p__56169;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56170,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56170,(1),null);\nvar vec__56173 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_value,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v], null));\nvar sk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56173,(0),null);\nvar sv = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56173,(1),null);\nif(v === true){\nreturn sk;\n} else {\nif(v === false){\nreturn [\"not \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sk)].join('');\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"only\",sv)){\nreturn [\"only \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sk)].join('');\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = v;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.seq(sv);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn [\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sk),garden.compiler.colon,cljs.core.str.cljs$core$IFn$_invoke$arity$1(sv),\")\"].join('');\n} else {\nreturn [\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sk),\")\"].join('');\n}\n\n}\n}\n}\n});\n/**\n * Make a media query expession from one or more maps. Keys are not\n *   validated but values have the following semantics:\n * \n *  `true`  as in `{:screen true}`  == \"screen\"\n *  `false` as in `{:screen false}` == \"not screen\"\n *  `:only` as in `{:screen :only}  == \"only screen\"\n */\ngarden.compiler.render_media_expr = (function garden$compiler$render_media_expr(expr){\nif(cljs.core.sequential_QMARK_(expr)){\nreturn garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_media_expr,expr));\n} else {\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" and \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_media_expr_part,expr));\n}\n});\n/**\n * Render a CSSUnit.\n */\ngarden.compiler.render_unit = (function garden$compiler$render_unit(css_unit){\nvar map__56176 = css_unit;\nvar map__56176__$1 = (((((!((map__56176 == null))))?(((((map__56176.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56176.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56176):map__56176);\nvar magnitude = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56176__$1,new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222));\nvar unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56176__$1,new cljs.core.Keyword(null,\"unit\",\"unit\",375175175));\nvar magnitude__$1 = magnitude;\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(magnitude__$1),cljs.core.name(unit)].join('');\n});\n/**\n * Render a CSS function.\n */\ngarden.compiler.render_function = (function garden$compiler$render_function(css_function){\nvar map__56178 = css_function;\nvar map__56178__$1 = (((((!((map__56178 == null))))?(((((map__56178.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56178.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56178):map__56178);\nvar f = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56178__$1,new cljs.core.Keyword(null,\"f\",\"f\",-1597136552));\nvar args = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56178__$1,new cljs.core.Keyword(null,\"args\",\"args\",1315556576));\nvar args__$1 = ((cljs.core.sequential_QMARK_(args))?garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1(args):garden.util.to_str(args));\nreturn garden.util.format.cljs$core$IFn$_invoke$arity$variadic(\"%s(%s)\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([garden.util.to_str(f),args__$1], 0));\n});\ngarden.compiler.render_color = (function garden$compiler$render_color(c){\nvar temp__5718__auto__ = new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441).cljs$core$IFn$_invoke$arity$1(c);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar a = temp__5718__auto__;\nvar map__56180 = garden.color.as_hsl(c);\nvar map__56180__$1 = (((((!((map__56180 == null))))?(((((map__56180.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56180.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56180):map__56180);\nvar hue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56180__$1,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848));\nvar saturation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56180__$1,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929));\nvar lightness = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56180__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930));\nvar vec__56181 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.units.percent,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [saturation,lightness], null));\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56181,(0),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56181,(1),null);\nreturn garden.util.format.cljs$core$IFn$_invoke$arity$variadic(\"hsla(%s)\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [hue,s,l,a], null))], 0));\n} else {\nreturn garden.color.as_hex(c);\n}\n});\nif((typeof garden !== 'undefined') && (typeof garden.compiler !== 'undefined') && (typeof garden.compiler.render_at_rule !== 'undefined')){\n} else {\n/**\n * Render a CSS at-rule\n */\ngarden.compiler.render_at_rule = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__56185 = cljs.core.get_global_hierarchy;\nreturn (fexpr__56185.cljs$core$IFn$_invoke$arity$0 ? fexpr__56185.cljs$core$IFn$_invoke$arity$0() : fexpr__56185.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"garden.compiler\",\"render-at-rule\"),new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\ngarden.compiler.render_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (_){\nreturn null;\n}));\ngarden.compiler.render_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"import\",\"import\",-1399500709),(function (p__56186){\nvar map__56187 = p__56186;\nvar map__56187__$1 = (((((!((map__56187 == null))))?(((((map__56187.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56187.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56187):map__56187);\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56187__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nvar map__56189 = value;\nvar map__56189__$1 = (((((!((map__56189 == null))))?(((((map__56189.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56189.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56189):map__56189);\nvar url = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56189__$1,new cljs.core.Keyword(null,\"url\",\"url\",276297046));\nvar media_queries = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56189__$1,new cljs.core.Keyword(null,\"media-queries\",\"media-queries\",-1563277678));\nvar url__$1 = ((typeof url === 'string')?garden.util.wrap_quotes(url):garden.compiler.render_css(url));\nvar queries = (cljs.core.truth_(media_queries)?garden.compiler.render_media_expr(media_queries):null);\nreturn [\"@import \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(queries)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(url__$1),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(queries)].join(''):url__$1)),garden.compiler.semicolon].join('');\n}));\ngarden.compiler.render_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"keyframes\",\"keyframes\",-1437976012),(function (p__56192){\nvar map__56193 = p__56192;\nvar map__56193__$1 = (((((!((map__56193 == null))))?(((((map__56193.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56193.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56193):map__56193);\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56193__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nvar map__56195 = value;\nvar map__56195__$1 = (((((!((map__56195 == null))))?(((((map__56195.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56195.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56195):map__56195);\nvar identifier = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56195__$1,new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498));\nvar frames = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56195__$1,new cljs.core.Keyword(null,\"frames\",\"frames\",1765687497));\nif(cljs.core.seq(frames)){\nvar body = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(garden.util.to_str(identifier)),garden.compiler.l_brace_1,cljs.core.str.cljs$core$IFn$_invoke$arity$1(garden.compiler.indent_str(garden.compiler.rule_join(cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,frames)))),garden.compiler.r_brace_1].join('');\nvar prefix = ((function (body,map__56195,map__56195__$1,identifier,frames,map__56193,map__56193__$1,value){\nreturn (function (vendor){\nreturn [\"@\",garden.util.vendor_prefix(vendor,\"keyframes \")].join('');\n});})(body,map__56195,map__56195__$1,identifier,frames,map__56193,map__56193__$1,value))\n;\nreturn garden.compiler.rule_join(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (body,prefix,map__56195,map__56195__$1,identifier,frames,map__56193,map__56193__$1,value){\nreturn (function (p1__56191_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__56191_SHARP_),body].join('');\n});})(body,prefix,map__56195,map__56195__$1,identifier,frames,map__56193,map__56193__$1,value))\n,cljs.core.cons(\"@keyframes \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(prefix,garden.compiler.vendors()))));\n} else {\nreturn null;\n}\n}));\ngarden.compiler.render_at_rule.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"media\",\"media\",-1066138403),(function (p__56197){\nvar map__56198 = p__56197;\nvar map__56198__$1 = (((((!((map__56198 == null))))?(((((map__56198.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56198.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56198):map__56198);\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56198__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nvar map__56200 = value;\nvar map__56200__$1 = (((((!((map__56200 == null))))?(((((map__56200.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56200.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56200):map__56200);\nvar media_queries = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56200__$1,new cljs.core.Keyword(null,\"media-queries\",\"media-queries\",-1563277678));\nvar rules = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56200__$1,new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366));\nif(cljs.core.seq(rules)){\nreturn [\"@media \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(garden.compiler.render_media_expr(media_queries)),garden.compiler.l_brace_1,cljs.core.str.cljs$core$IFn$_invoke$arity$1(garden.compiler.indent_str(garden.compiler.rule_join(cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,rules)))),garden.compiler.r_brace_1].join('');\n} else {\nreturn null;\n}\n}));\ngoog.object.set(garden.compiler.CSSRenderer,\"null\",true);\n\ngoog.object.set(garden.compiler.render_css,\"null\",(function (this$){\nreturn \"\";\n}));\n\ngarden.color.CSSColor.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.color.CSSColor.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_color(this$__$1);\n});\n\ncljs.core.IndexedSeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.IndexedSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ncljs.core.LazySeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.LazySeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ncljs.core.NodeSeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.NodeSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ncljs.core.BlackNode.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.BlackNode.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_rule(this$__$1);\n});\n\ncljs.core.PersistentArrayMapSeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentArrayMapSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ngarden.types.CSSUnit.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.types.CSSUnit.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_unit(this$__$1);\n});\n\ncljs.core.ChunkedSeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.ChunkedSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ncljs.core.Cons.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.Cons.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ncljs.core.RSeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.RSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ngoog.object.set(garden.compiler.CSSRenderer,\"number\",true);\n\ngoog.object.set(garden.compiler.render_css,\"number\",(function (this$){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$);\n}));\n\ngarden.types.CSSFunction.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.types.CSSFunction.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_function(this$__$1);\n});\n\ncljs.core.PersistentHashMap.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentHashMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_declaration(this$__$1);\n});\n\ncljs.core.ArrayNodeSeq.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.ArrayNodeSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ncljs.core.Subvec.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.Subvec.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_rule(this$__$1);\n});\n\ngoog.object.set(garden.compiler.CSSRenderer,\"_\",true);\n\ngoog.object.set(garden.compiler.render_css,\"_\",(function (this$){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$);\n}));\n\ncljs.core.PersistentTreeMap.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentTreeMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_declaration(this$__$1);\n});\n\ncljs.core.ChunkedCons.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.ChunkedCons.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n\ngarden.types.CSSAtRule.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ngarden.types.CSSAtRule.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_at_rule.cljs$core$IFn$_invoke$arity$1(this$__$1);\n});\n\ncljs.core.RedNode.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.RedNode.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_rule(this$__$1);\n});\n\ncljs.core.PersistentVector.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentVector.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_rule(this$__$1);\n});\n\ncljs.core.Keyword.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.Keyword.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.name(this$__$1);\n});\n\ncljs.core.PersistentArrayMap.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.PersistentArrayMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn garden.compiler.render_declaration(this$__$1);\n});\n\ncljs.core.List.prototype.garden$compiler$CSSRenderer$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.List.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,this$__$1);\n});\n/**\n * Convert a sequence of maps into CSS for use with the HTML style\n * attribute.\n */\ngarden.compiler.compile_style = (function garden$compiler$compile_style(ms){\nreturn cljs.core.first(garden.compiler.render_css(garden.compiler.expand(cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.merge,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(garden.util.declaration_QMARK_,ms)))));\n});\n/**\n * Return a string of CSS.\n */\ngarden.compiler.do_compile = (function garden$compiler$do_compile(flags,rules){\nvar _STAR_flags_STAR__orig_val__56202 = garden.compiler._STAR_flags_STAR_;\nvar _STAR_flags_STAR__temp_val__56203 = flags;\ngarden.compiler._STAR_flags_STAR_ = _STAR_flags_STAR__temp_val__56203;\n\ntry{return garden.compiler.rule_join(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compiler.render_css,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(garden.compiler.top_level_expression_QMARK_,garden.compiler.expand_stylesheet(rules)))));\n}finally {garden.compiler._STAR_flags_STAR_ = _STAR_flags_STAR__orig_val__56202;\n}});\n/**\n * Prefix stylesheet with files in preamble. Not available in\n *   ClojureScript.\n */\ngarden.compiler.do_preamble = (function garden$compiler$do_preamble(p__56204,stylesheet){\nvar map__56205 = p__56204;\nvar map__56205__$1 = (((((!((map__56205 == null))))?(((((map__56205.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56205.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56205):map__56205);\nvar preamble = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56205__$1,new cljs.core.Keyword(null,\"preamble\",\"preamble\",1641040241));\nreturn stylesheet;\n});\n/**\n * Compress CSS if the pretty-print(?) flag is true.\n */\ngarden.compiler.do_compression = (function garden$compiler$do_compression(p__56207,stylesheet){\nvar map__56208 = p__56207;\nvar map__56208__$1 = (((((!((map__56208 == null))))?(((((map__56208.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56208.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56208):map__56208);\nvar pretty_print_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56208__$1,new cljs.core.Keyword(null,\"pretty-print?\",\"pretty-print?\",1932217158));\nvar pretty_print = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56208__$1,new cljs.core.Keyword(null,\"pretty-print\",\"pretty-print\",-1314067013));\nif(cljs.core.truth_((function (){var or__4131__auto__ = pretty_print_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn pretty_print;\n}\n})())){\nreturn stylesheet;\n} else {\nreturn garden.compression.compress_stylesheet(stylesheet);\n}\n});\n/**\n * Write contents of stylesheet to disk.\n */\ngarden.compiler.do_output_to = (function garden$compiler$do_output_to(p__56210,stylesheet){\nvar map__56211 = p__56210;\nvar map__56211__$1 = (((((!((map__56211 == null))))?(((((map__56211.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__56211.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__56211):map__56211);\nvar output_to = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56211__$1,new cljs.core.Keyword(null,\"output-to\",\"output-to\",-965533968));\nreturn stylesheet;\n});\n/**\n * Convert any number of Clojure data structures to CSS.\n */\ngarden.compiler.compile_css = (function garden$compiler$compile_css(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___56333 = arguments.length;\nvar i__4731__auto___56334 = (0);\nwhile(true){\nif((i__4731__auto___56334 < len__4730__auto___56333)){\nargs__4736__auto__.push((arguments[i__4731__auto___56334]));\n\nvar G__56337 = (i__4731__auto___56334 + (1));\ni__4731__auto___56334 = G__56337;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn garden.compiler.compile_css.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\ngarden.compiler.compile_css.cljs$core$IFn$_invoke$arity$variadic = (function (flags,rules){\nvar vec__56215 = (cljs.core.truth_((function (){var and__4120__auto__ = garden.util.hash_map_QMARK_(flags);\nif(and__4120__auto__){\nreturn cljs.core.some(cljs.core.set(cljs.core.keys(flags)),cljs.core.keys(garden.compiler._STAR_flags_STAR_));\n} else {\nreturn and__4120__auto__;\n}\n})())?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([garden.compiler._STAR_flags_STAR_,flags], 0)),rules], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.compiler._STAR_flags_STAR_,cljs.core.cons(flags,rules)], null));\nvar flags__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56215,(0),null);\nvar rules__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56215,(1),null);\nreturn garden.compiler.do_output_to(flags__$1,garden.compiler.do_compression(flags__$1,garden.compiler.do_preamble(flags__$1,garden.compiler.do_compile(flags__$1,rules__$1))));\n});\n\ngarden.compiler.compile_css.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\ngarden.compiler.compile_css.cljs$lang$applyTo = (function (seq56213){\nvar G__56214 = cljs.core.first(seq56213);\nvar seq56213__$1 = cljs.core.next(seq56213);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__56214,seq56213__$1);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Functions for compiling Clojure data structures to CSS.","~:file","garden/compiler.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$with-media-query-context","~$garden.compiler","~$with-selector-context","^G"],"~:excludes",["~#set",[]],"~:macros",["^ ","^F",["^ ","~:arglists",["~#list",[["~$selector-context","~$&","~$body"]]],"^8",82,"^9",1,"^7","garden/compiler.cljc","~:name","~$garden.compiler/with-media-query-context","~:ns","^G","~:macro",true],"^H",["^ ","^L",["^M",[["^N","~$&","^O"]]],"^8",77,"^9",1,"^7","garden/compiler.cljc","^P","~$garden.compiler/with-selector-context","^R","^G","^S",true]],"^P","^G","~:op","^R","~:imports",null,"~:requires",["^ ","~$units","~$garden.units","^Y","^Y","~$garden.types","^Z","~$cljs.core","^[","~$goog","^10","~$garden.util","^11","~$color","~$garden.color","~$garden.selectors","^14","~$util","^11","~$compression","~$garden.compression","~$string","~$clojure.string","^13","^13","^19","^19","^17","^17","~$selectors","^14"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",["^ ","~$CSSColor","^13","~$CSSUnit","^Z","~$CSSFunction","^Z","~$CSSAtRule","^Z"],"^1=",["^ ","^G","^G","^[","^[","^X","^Y","^Y","^Y","^12","^13","^14","^14","^13","^13","^1:","^14"],"~:form",["^M",["~$ns","^G","Functions for compiling Clojure data structures to CSS.",["^M",["^1<",["^19","~:as","^18"],["^13","^1E","^12","~:refer",["^1?"]],["^17","^1E","^16"],["^14","^1E","^1:"],["^Y","^1E","^X"],["^11","^1E","^15"],["^Z","^1F",["^1@","^1A","^1B"]]]],["^M",["^1=",["^G","^1F",["^F","^H"]]]]]],"~:flags",["^ ","^1<",["^J",[]],"^1=",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^10","^[","^19","^13","^17","^14","^Y","^11","^Z"]],"^R","^G","~:resource-id",["~:shadow.build.classpath/resource","garden/compiler.cljc"],"~:compiled-at",1619083341621,"~:resource-name","garden/compiler.cljc","~:warnings",[],"~:source","(ns garden.compiler\n  \"Functions for compiling Clojure data structures to CSS.\"\n  (:require\n   [clojure.string :as string]\n   #?(:clj  [garden.color :as color]\n      :cljs [garden.color :as color :refer [CSSColor]])\n   [garden.compression :as compression]\n   [garden.selectors :as selectors]\n   [garden.units :as units]\n   [garden.util :as util]\n   #?(:cljs\n      [garden.types :refer [CSSUnit CSSFunction CSSAtRule]]))\n  #?(:cljs\n     (:require-macros\n      [garden.compiler :refer [with-media-query-context with-selector-context]]))\n  #?(:clj\n     (:import (garden.types CSSUnit CSSFunction CSSAtRule)\n              (garden.color CSSColor))))\n\n;; ---------------------------------------------------------------------\n;; Compiler flags\n\n(def\n  ^{:dynamic true\n    :private true\n    :doc \"The current compiler flags.\"}\n  *flags*\n  {;; When set to `true` the compiled stylesheet will be \"pretty\n   ;; printed.\" This would be equivalent to setting\n   ;; `{:ouput-style => :expanded}` in Sass. When set to `false`\n   ;; the compiled stylesheet will be compressed with the YUI\n   ;; compressor.\n   :pretty-print? true\n   ;; A sequence of files to prepend to the output file.\n   :preamble []\n   ;; Location to save a stylesheet after compiling.\n   :output-to nil\n   ;; A list of vendor prefixes to prepend to things like\n   ;; `@keyframes`, properties within declarations containing the\n   ;; `^:prefix` meta data, and properties defined in `:auto-prefix`.\n   :vendors []\n   ;; A set of properties to automatically prefix with `:vendors`.\n   :auto-prefix #{}\n   ;; `@media-query` specific configuration.\n   :media-expressions {;; May either be `:merge` or `:default`. When\n                       ;; set to `:merge` nested media queries will\n                       ;; have their expressions merged with their\n                       ;; parent's.\n                       :nesting-behavior :default}})\n\n(def\n  ^{:private true\n    :doc \"Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries.\"}\n  media-expression-behavior\n  {:merge (fn [expr context] (merge context expr))\n   :default (fn [expr _] expr)})\n\n(def\n  ^{:dynamic true\n    :private true\n    :doc \"The current parent selector context.\"}\n  *selector-context* nil)\n\n(def\n  ^{:dynamic true\n    :private true\n    :doc \"The current media query context.\"}\n  *media-query-context* nil)\n\n;; ---------------------------------------------------------------------\n;; Utilities\n\n(defmacro with-selector-context\n  [selector-context & body]\n  `(binding [*selector-context* ~selector-context]\n     (do ~@body)))\n\n(defmacro with-media-query-context\n  [selector-context & body]\n  `(binding [*media-query-context* ~selector-context]\n     (do ~@body)))\n\n(defn- vendors\n  \"Return the current list of browser vendors specified in `*flags*`.\"\n  []\n  (seq (:vendors *flags*)))\n\n(defn- auto-prefixed-properties\n  \"Return the current list of auto-prefixed properties specified in `*flags*`.\"\n  []\n  (set (map name (:auto-prefix *flags*))))\n\n(defn- auto-prefix?\n  [property]\n  (contains? (auto-prefixed-properties) property))\n\n(defn- top-level-expression? [x]\n  (or (util/rule? x)\n      (util/at-import? x)\n      (util/at-media? x)\n      (util/at-keyframes? x)))\n\n(defn- divide-vec\n  \"Return a vector of [(filter pred coll) (remove pred coll)].\"\n  [pred coll]\n  ((juxt filter remove) pred coll))\n\n#?(:clj\n   (defn- save-stylesheet\n     \"Save a stylesheet to disk.\"\n     [path stylesheet]\n     (spit path stylesheet)))\n\n;; =====================================================================\n;; Expansion\n\n;; The expansion process ensures that before a stylesheet is rendered\n;; it is in a format that can be easily digested. That is, it produces\n;; a new data structure which is a list of only one level.\n\n;; This intermediate process between input and compilation separates\n;; concerns between parsing data structures and compiling them to CSS.\n\n;; All data types that implement `IExpandable` should produce a list.\n\n(defprotocol IExpandable\n  (expand [this]\n    \"Return a list containing the expanded form of `this`.\"))\n\n;; ---------------------------------------------------------------------\n;; List expansion\n\n(defn- expand-seqs\n  \"Like flatten but only affects seqs.\"\n  [coll]\n  (mapcat\n   (fn [x]\n     (if (seq? x)\n       (expand-seqs x)\n       (list x)))\n   coll))\n\n;; ---------------------------------------------------------------------\n;; Declaration expansion\n\n(defn expand-declaration-1\n  [declaration]\n  {:pre [(map? declaration)]}\n  (let [prefix #(util/as-str %1 \"-\" %2)]\n    (reduce\n     (fn [m [k v]]\n       (if (util/hash-map? v)\n         (reduce\n          (fn [m1 [k1 v1]]\n            (assoc m1 (prefix k k1) v1))\n          m\n          (expand-declaration-1 v))\n         (assoc m (util/to-str k) v)))\n     (empty declaration)\n     declaration)))\n\n(defn- expand-declaration\n  [declaration]\n  (if (empty? declaration)\n    declaration\n    (with-meta (expand-declaration-1 declaration) (meta declaration))))\n\n;; ---------------------------------------------------------------------\n;; Rule expansion\n\n(def\n  ^{:private true\n    :doc \"Matches a single \\\"&\\\" or \\\"&\\\" follow by one or more\n  non-whitespace characters.\"}\n  parent-selector-re\n  #\"^&(?:\\S+)?$\")\n\n(defn- extract-reference\n  \"Extract the selector portion of a parent selector reference.\"\n  [selector]\n  (when-let [reference (->> (last selector)\n                            (util/to-str)\n                            (re-find parent-selector-re))]\n    (apply str (rest reference))))\n\n(defn- expand-selector-reference\n  [selector]\n  (if-let [reference (extract-reference selector)]\n    (let [parent (butlast selector)]\n      (concat (butlast parent)\n              (-> (last parent)\n                  (util/as-str reference)\n                  (list))))\n    selector))\n\n(defn- expand-selector [selector parent]\n  (let [selector (map selectors/css-selector selector)\n        selector (if (seq parent)\n                   (->> (util/cartesian-product parent selector)\n                        (map flatten))\n                   (map list selector))]\n    (map expand-selector-reference selector)))\n\n(defn- expand-rule\n  [rule]\n  (let [[selector children] (split-with selectors/selector? rule)\n        selector (expand-selector selector *selector-context*)\n        children (expand children)\n        [declarations xs] (divide-vec util/declaration? children)\n        ys (with-selector-context\n             (if (seq selector)\n               selector\n               *selector-context*)\n             (doall (mapcat expand xs)))]\n    (->> (mapcat expand declarations)\n         (conj [selector])\n         (conj ys))))\n\n;; ---------------------------------------------------------------------\n;; At-rule expansion\n\n(defmulti ^:private expand-at-rule :identifier)\n\n(defmethod expand-at-rule :default\n  [at-rule]\n  (list at-rule))\n\n;; @keyframes expansion\n\n(defmethod expand-at-rule :keyframes\n  [{:keys [value]}]\n  (let [{:keys [identifier frames]} value]\n    (->> {:identifier (util/to-str identifier)\n          :frames (mapcat expand frames)}\n         (CSSAtRule. :keyframes)\n         (list))))\n\n;; @media expansion\n\n(defn- expand-media-query-expression [expression]\n  (if-let [f (->> [:media-expressions :nesting-behavior]\n                  (get-in *flags*)\n                  (media-expression-behavior))]\n    (f expression *media-query-context*)\n    expression))\n\n(defmethod expand-at-rule :media\n  [{:keys [value]}]\n  (let [{:keys [media-queries rules]} value\n        media-queries (expand-media-query-expression media-queries)\n        xs (with-media-query-context media-queries             (doall (mapcat expand (expand rules))))\n        ;; Though media-queries may be nested, they may not be nested\n        ;; at compile time. Here we make sure this is the case.\n        [subqueries rules] (divide-vec util/at-media? xs)]\n    (cons\n     (CSSAtRule. :media {:media-queries media-queries\n                         :rules rules})\n     subqueries)))\n\n;; ---------------------------------------------------------------------\n;; Stylesheet expansion\n\n(defn- expand-stylesheet [xs]\n  (->> (expand xs)\n       (map expand)\n       (apply concat)))\n\n(extend-protocol IExpandable\n\n  #?(:clj clojure.lang.ISeq\n     :cljs IndexedSeq)\n  (expand [this] (expand-seqs this))\n\n  #?(:cljs LazySeq)\n  #?(:cljs (expand [this] (expand-seqs this)))\n\n  #?(:cljs RSeq)\n  #?(:cljs(expand [this] (expand-seqs this)))\n\n  #?(:cljs NodeSeq)\n  #?(:cljs (expand [this] (expand-seqs this)))\n\n  #?(:cljs ArrayNodeSeq)\n  #?(:cljs (expand [this] (expand-seqs this)))\n\n  #?(:cljs Cons)\n  #?(:cljs (\n            expand [this] (expand-seqs this)))\n\n  #?(:cljs ChunkedCons)\n  #?(:cljs (expand [this] (expand-seqs this)))\n\n  #?(:cljs ChunkedSeq)\n  (expand [this] (expand-seqs this))\n\n  #?(:cljs PersistentArrayMapSeq)\n  #?(:cljs (expand [this] (expand-seqs this)))\n\n  #?(:cljs List)\n  #?(:cljs (expand [this] (expand-seqs this)))\n\n  #?(:clj  clojure.lang.IPersistentVector\n     :cljs PersistentVector)\n  (expand [this] (expand-rule this))\n\n  #?(:cljs Subvec)\n  #?(:cljs (expand [this] (expand-rule this)))\n\n  #?(:cljs BlackNode)\n  #?(:cljs (expand [this] (expand-rule this)))\n\n  #?(:cljs RedNode)\n  #?(:cljs (expand [this] (expand-rule this)))\n\n  #?(:clj clojure.lang.IPersistentMap\n     :cljs PersistentArrayMap)\n  (expand [this] (list (expand-declaration this)))\n\n  #?(:cljs PersistentHashMap)\n  #?(:cljs (expand [this] (list (expand-declaration this))))\n\n  #?(:cljs PersistentTreeMap)\n  #?(:cljs (expand [this] (list (expand-declaration this))))\n\n  #?(:clj Object\n     :cljs default)\n  (expand [this] (list this))\n\n  CSSFunction\n  (expand [this] (list this))\n\n  CSSAtRule\n  (expand [this] (expand-at-rule this))\n\n  CSSColor\n  (expand [this] (list this))\n\n  nil\n  (expand [this] nil))\n\n;; ---------------------------------------------------------------------\n;; Rendering\n\n(defprotocol CSSRenderer\n  (render-css [this]\n    \"Convert a Clojure data type in to a string of CSS.\"))\n\n;; ---------------------------------------------------------------------\n;; Punctuation\n\n(def ^:private comma \", \")\n(def ^:private colon \": \")\n(def ^:private semicolon \";\")\n(def ^:private l-brace \" {\\n\")\n(def ^:private r-brace \"\\n}\")\n(def ^:private l-brace-1 \" {\\n\\n\")\n(def ^:private r-brace-1 \"\\n\\n}\")\n(def ^:private rule-sep \"\\n\\n\")\n(def ^:private indent \"  \")\n\n(defn- space-separated-list\n  \"Return a space separated list of values.\"\n  ([xs]\n   (space-separated-list render-css xs))\n  ([f xs]\n   (string/join \" \" (map f xs))))\n\n(defn- comma-separated-list\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  ([xs]\n   (comma-separated-list render-css xs))\n  ([f xs]\n   (let [ys (for [x xs]\n              (if (sequential? x)\n                (space-separated-list f x)\n                (f x)))]\n     (string/join comma ys))))\n\n(defn- rule-join [xs]\n  (string/join rule-sep xs))\n\n(def\n  ^{:private true\n    :doc \"Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name.\"}\n  indent-loc-re\n  #?(:clj\n     #\"(?m)(?=[\\sA-z#.}-]+)^\")\n  #?(:cljs\n     (js/RegExp. \"(?=[ A-Za-z#.}-]+)^\" \"gm\")))\n\n(defn- indent-str [s]\n  #?(:clj\n     (string/replace s indent-loc-re indent))\n  #?(:cljs\n     (.replace s indent-loc-re indent)))\n\n;; ---------------------------------------------------------------------\n;; Declaration rendering\n\n(defn- render-value\n  \"Render the value portion of a declaration.\"\n  [x]\n  (if (util/at-keyframes? x)\n    (util/to-str (get-in x [:value :identifier]))\n    (render-css x)))\n\n(defn- render-property-and-value\n  [[prop val]]\n  (if (set? val)\n    (->> (interleave (repeat prop) val)\n         (partition 2)\n         (map render-property-and-value)\n         (string/join \"\\n\"))\n    (let [val (if (sequential? val)\n                (comma-separated-list render-value val)\n                (render-value val))]\n      (util/as-str prop colon val semicolon))))\n\n(defn- add-blocks\n  \"For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block.\"\n  [f declaration]\n  (mapcat #(cons % (f %)) declaration))\n\n(defn- prefixed-blocks\n  \"Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`.\"\n  [vendors [p v]]\n  (for [vendor vendors]\n    [(util/vendor-prefix vendor (name p)) v]))\n\n(defn- prefix-all-properties\n  \"Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`.\"\n  [vendors declaration]\n  (add-blocks (partial prefixed-blocks vendors) declaration))\n\n(defn- prefix-auto-properties\n  \"Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set.\"\n  [vendors declaration]\n  (add-blocks\n   (fn [block]\n     (let [[p _] block]\n       (when (auto-prefix? (name p))\n         (prefixed-blocks vendors block))))\n   declaration))\n\n(defn- prefix-declaration\n  \"Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set.\"\n  [declaration]\n  (let [vendors (or (:vendors (meta declaration)) (vendors))\n        prefix-fn (if (:prefix (meta declaration))\n                    prefix-all-properties\n                    prefix-auto-properties)]\n    (prefix-fn vendors declaration)))\n\n(defn- render-declaration\n  [declaration]\n  (->> (prefix-declaration declaration)\n       (map render-property-and-value)\n       (string/join \"\\n\")))\n\n;; ---------------------------------------------------------------------\n;; Rule rendering\n\n(defn- render-selector\n  [selector]\n  (comma-separated-list selector))\n\n(defn- render-rule\n  \"Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded.\"\n  [[selector declarations :as rule]]\n  (when (and (seq rule) (every? seq rule))\n    (str (render-selector selector)\n         l-brace\n         (->> (map render-css declarations)\n              (string/join \"\\n\")\n              (indent-str))\n         r-brace)))\n\n;; ---------------------------------------------------------------------\n;; Media query rendering\n\n(defn- render-media-expr-part\n  \"Render the individual components of a media expression.\"\n  [[k v]]\n  (let [[sk sv] (map render-value [k v])]\n    (cond\n      (true? v) sk\n      (false? v) (str \"not \" sk)\n      (= \"only\" sv) (str \"only \" sk)\n      :else (if (and v (seq sv))\n              (str \"(\" sk colon sv \")\")\n              (str \"(\" sk \")\")))))\n\n(defn- render-media-expr\n  \"Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n\n    `true`  as in `{:screen true}`  == \\\"screen\\\"\n    `false` as in `{:screen false}` == \\\"not screen\\\"\n    `:only` as in `{:screen :only}  == \\\"only screen\\\"\"\n  [expr]\n  (if (sequential? expr)\n    (->> (map render-media-expr expr)\n         (comma-separated-list))\n    (->> (map render-media-expr-part expr)\n         (string/join \" and \"))))\n\n;; ---------------------------------------------------------------------\n;; Garden type rendering\n\n(defn- render-unit\n  \"Render a CSSUnit.\"\n  [css-unit]\n  (let [{:keys [magnitude unit]} css-unit\n        magnitude #?(:cljs magnitude)\n        #?(:clj (if (ratio? magnitude)\n                  (float magnitude)\n                  magnitude))]\n    (str magnitude (name unit))))\n\n(defn- render-function\n  \"Render a CSS function.\"\n  [css-function]\n  (let [{:keys [f args]} css-function\n        args (if (sequential? args)\n               (comma-separated-list args)\n               (util/to-str args))]\n    (util/format \"%s(%s)\" (util/to-str f) args)))\n\n(defn ^:private render-color [c]\n  (if-let [a (:alpha c)]\n    (let [{:keys [hue saturation lightness]} (color/as-hsl c)\n          [s l] (map units/percent [saturation lightness])]\n      (util/format \"hsla(%s)\" (comma-separated-list [hue s l a])))\n    (color/as-hex c)))\n\n;; ---------------------------------------------------------------------\n;; At-rule rendering\n\n(defmulti ^:private render-at-rule\n  \"Render a CSS at-rule\"\n  :identifier)\n\n(defmethod render-at-rule :default [_] nil)\n\n;; @import\n\n(defmethod render-at-rule :import\n  [{:keys [value]}]\n  (let [{:keys [url media-queries]} value\n        url (if (string? url)\n              (util/wrap-quotes url)\n              (render-css url))\n        queries (when media-queries\n                  (render-media-expr media-queries))]\n    (str \"@import \"\n         (if queries (str url \" \" queries) url)\n         semicolon)))\n\n;; @keyframes\n\n(defmethod render-at-rule :keyframes\n  [{:keys [value]}]\n  (let [{:keys [identifier frames]} value]\n    (when (seq frames)\n      (let [body (str (util/to-str identifier)\n                      l-brace-1\n                      (->> (map render-css frames)\n                           (rule-join)\n                           (indent-str))\n                      r-brace-1)\n            prefix (fn [vendor]\n                     (str \"@\" (util/vendor-prefix vendor \"keyframes \")))]\n        (->> (map prefix (vendors))\n             (cons \"@keyframes \")\n             (map #(str % body))\n             (rule-join))))))\n\n;; @media\n\n(defmethod render-at-rule :media\n  [{:keys [value]}]\n  (let [{:keys [media-queries rules]} value]\n    (when (seq rules)\n      (str \"@media \"\n           (render-media-expr media-queries)\n           l-brace-1\n           (-> (map render-css rules)\n               (rule-join)\n               (indent-str))\n           r-brace-1))))\n\n\n;; ---------------------------------------------------------------------\n;; CSSRenderer implementation\n\n(extend-protocol CSSRenderer\n  #?(:clj clojure.lang.ISeq\n     :cljs IndexedSeq)\n  (render-css [this] (map render-css this))\n\n  #?(:cljs LazySeq)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs RSeq)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs NodeSeq)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs ArrayNodeSeq)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs Cons)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs ChunkedCons)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs ChunkedSeq)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs PersistentArrayMapSeq)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:cljs List)\n  #?(:cljs (render-css [this] (map render-css this)))\n\n  #?(:clj clojure.lang.IPersistentVector\n     :cljs PersistentVector)\n  (render-css [this] (render-rule this))\n\n  #?(:cljs Subvec)\n  #?(:cljs (render-css [this] (render-rule this)))\n\n  #?(:cljs BlackNode)\n  #?(:cljs (render-css [this] (render-rule this)))\n\n  #?(:cljs RedNode)\n  #?(:cljs (render-css [this] (render-rule this)))\n\n  #?(:clj clojure.lang.IPersistentMap\n     :cljs PersistentArrayMap)\n  (render-css [this] (render-declaration this))\n\n  #?(:cljs PersistentHashMap)\n  #?(:cljs (render-css [this] (render-declaration this)))\n\n  #?(:cljs PersistentTreeMap)\n  #?(:cljs (render-css [this] (render-declaration this)))\n\n  #?(:clj clojure.lang.Ratio)\n  #?(:clj (render-css [this] (str (float this))))\n\n  #?(:cljs number)\n  #?(:cljs (render-css [this] (str this)))\n\n  #?(:clj clojure.lang.Keyword\n     :cljs Keyword)\n  (render-css [this] (name this))\n\n  CSSUnit\n  (render-css [this] (render-unit this))\n\n  CSSFunction\n  (render-css [this] (render-function this))\n\n  CSSAtRule\n  (render-css [this] (render-at-rule this))\n\n  #?(:clj CSSColor\n     :cljs color/CSSColor)\n  (render-css [this] (render-color this))\n\n  #?(:clj Object\n     :cljs default)\n  (render-css [this] (str this))\n\n  nil\n  (render-css [this] \"\"))\n\n\n;; ---------------------------------------------------------------------\n;; Compilation\n\n(defn compile-style\n  \"Convert a sequence of maps into CSS for use with the HTML style\n   attribute.\"\n  [ms]\n  (->> (filter util/declaration? ms)\n       (reduce merge)\n       (expand)\n       (render-css)\n       (first)))\n\n(defn- do-compile\n  \"Return a string of CSS.\"\n  [flags rules]\n  (binding [*flags* flags]\n    (->> (expand-stylesheet rules)\n         (filter top-level-expression?)\n         (map render-css)\n         (remove nil?)\n         (rule-join))))\n\n(defn- do-preamble\n  \"Prefix stylesheet with files in preamble. Not available in\n  ClojureScript.\"\n  [{:keys [preamble]} stylesheet]\n  #?(:clj\n     (string/join \"\\n\" (conj (mapv slurp preamble) stylesheet)))\n  #?(:cljs\n     stylesheet))\n\n(defn- do-compression\n  \"Compress CSS if the pretty-print(?) flag is true.\"\n  [{:keys [pretty-print? pretty-print]} stylesheet]\n  ;; Also accept pretty-print like CLJS.\n  (if (or pretty-print? pretty-print)\n    stylesheet\n    (compression/compress-stylesheet stylesheet)))\n\n(defn- do-output-to\n  \"Write contents of stylesheet to disk.\"\n  [{:keys [output-to]} stylesheet]\n  #?(:clj\n     (when output-to\n       (save-stylesheet output-to stylesheet)\n       (println \"Wrote:\" output-to)))\n  stylesheet)\n\n(defn compile-css\n  \"Convert any number of Clojure data structures to CSS.\"\n  [flags & rules]\n  (let [[flags rules] (if (and (util/hash-map? flags)\n                               (some (set (keys flags)) (keys *flags*)))\n                        [(merge *flags* flags) rules]\n                        [*flags* (cons flags rules)])]\n    (->> (do-compile flags rules)\n         (do-preamble flags)\n         (do-compression flags)\n         (do-output-to flags))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["garden.compiler/*flags*","garden.compiler/media-expression-behavior","expr","context","cljs.core.merge","_","garden.compiler/*selector-context*","garden.compiler/*media-query-context*","garden.compiler/vendors","cljs.core/seq","garden.compiler/auto-prefixed-properties","cljs.core/set","cljs.core.map","cljs.core/name","garden.compiler/auto-prefix?","property","cljs.core/contains?","garden.compiler/top-level-expression?","x","or__4131__auto__","garden.util/rule?","garden.util/at-import?","garden.util/at-media?","garden.util/at-keyframes?","garden.compiler/divide-vec","pred","coll","cljs.core.juxt","cljs.core/filter","cljs.core/remove","x__4433__auto__","m__4434__auto__","garden.compiler/expand","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","garden.compiler/IExpandable","this","garden.compiler/expand-seqs","cljs.core.mapcat","cljs.core/seq?","cljs.core/List","js/Error","garden.compiler/expand-declaration-1","declaration","cljs.core/map?","p1__56106#","p2__56107#","prefix","garden.util.as_str","cljs.core.reduce","p__56108","vec__56109","cljs.core.nth","m","k","v","garden.util/hash-map?","p__56112","vec__56113","m1","k1","v1","cljs.core.assoc","garden.util/to-str","cljs.core/empty","garden.compiler/expand-declaration","cljs.core/empty?","cljs.core/with-meta","cljs.core/meta","garden.compiler/parent-selector-re","garden.compiler/extract-reference","selector","temp__5720__auto__","reference","cljs.core/last","cljs.core/re-find","cljs.core.apply","cljs.core/str","cljs.core/rest","garden.compiler/expand-selector-reference","temp__5718__auto__","parent","cljs.core/butlast","cljs.core.concat","garden.compiler/expand-selector","garden.selectors/css-selector","garden.util.cartesian_product","cljs.core/flatten","cljs.core/list","garden.compiler/expand-rule","rule","vec__56116","vec__56119","children","cljs.core/split-with","garden.selectors/selector?","declarations","xs","garden.util/declaration?","ys","*selector-context*-orig-val__56122","*selector-context*-temp-val__56123","cljs.core.doall","cljs.core.conj","js/garden","js/garden.compiler","js/garden.compiler.expand-at-rule","method-table__4613__auto__","cljs.core.atom","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get","fexpr__56124","cljs.core/MultiFn","cljs.core.symbol","garden.compiler/expand-at-rule","at-rule","p__56125","map__56126","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","value","map__56128","identifier","frames","garden.types/CSSAtRule","garden.compiler/expand-media-query-expression","expression","f","cljs.core.get_in","G__56130","p__56131","map__56132","map__56134","vec__56135","media-queries","rules","*media-query-context*-orig-val__56139","*media-query-context*-temp-val__56140","subqueries","cljs.core/cons","garden.compiler/expand-stylesheet","cljs.core/concat","goog.object/set","cljs.core/IndexedSeq","cljs.core/LazySeq","cljs.core/RSeq","cljs.core/NodeSeq","cljs.core/ArrayNodeSeq","cljs.core/Cons","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/PersistentArrayMapSeq","cljs.core/PersistentVector","cljs.core/Subvec","cljs.core/BlackNode","cljs.core/RedNode","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","cljs.core/PersistentTreeMap","garden.types/CSSFunction","garden.color/CSSColor","garden.compiler/render-css","garden.compiler/CSSRenderer","garden.compiler/comma","garden.compiler/colon","garden.compiler/semicolon","garden.compiler/l-brace","garden.compiler/r-brace","garden.compiler/l-brace-1","garden.compiler/r-brace-1","garden.compiler/rule-sep","garden.compiler/indent","var_args","G__56142","garden.compiler/space-separated-list","garden.compiler.space_separated_list","clojure.string.join","G__56144","garden.compiler/comma-separated-list","garden.compiler.comma_separated_list","iter__4523__auto__","s__56146","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__56148","cljs.core/chunk-buffer","i__56147","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56145","cljs.core/chunk-rest","cljs.core/first","cljs.core/sequential?","garden.compiler/rule-join","garden.compiler/indent-loc-re","js/RegExp","garden.compiler/indent-str","s","garden.compiler/render-value","p__56149","vec__56150","garden.compiler/render-property-and-value","prop","val","cljs.core/set?","cljs.core.interleave","cljs.core.repeat","cljs.core.partition","garden.compiler/add-blocks","p1__56153#","p__56154","vec__56155","garden.compiler/prefixed-blocks","vendors","p","s__56159","b__56161","i__56160","iter__56158","vendor","garden.util/vendor-prefix","garden.compiler/prefix-all-properties","cljs.core.partial","garden.compiler/prefix-auto-properties","block","vec__56162","garden.compiler/prefix-declaration","prefix-fn","garden.compiler/render-declaration","garden.compiler/render-selector","p__56165","vec__56166","garden.compiler/render-rule","cljs.core/every?","p__56169","vec__56170","garden.compiler/render-media-expr-part","vec__56173","sk","sv","cljs.core._EQ_","and__4120__auto__","garden.compiler/render-media-expr","garden.compiler/render-unit","css-unit","map__56176","magnitude","unit","garden.compiler/render-function","css-function","map__56178","args","garden.util.format","garden.compiler/render-color","c","a","map__56180","vec__56181","hue","saturation","lightness","garden.color/as-hsl","l","garden.units/percent","garden.color/as-hex","js/garden.compiler.render-at-rule","fexpr__56185","garden.compiler/render-at-rule","p__56186","map__56187","map__56189","url","garden.util/wrap-quotes","queries","p__56192","map__56193","map__56195","body","p1__56191#","p__56197","map__56198","map__56200","cljs.core/Keyword","garden.types/CSSUnit","garden.compiler/compile-style","ms","cljs.core.filter","cljs.core/merge","garden.compiler/do-compile","flags","*flags*-orig-val__56202","*flags*-temp-val__56203","cljs.core.remove","cljs.core/nil?","p__56204","map__56205","garden.compiler/do-preamble","preamble","stylesheet","p__56207","map__56208","garden.compiler/do-compression","pretty-print?","pretty-print","garden.compression/compress-stylesheet","p__56210","map__56211","garden.compiler/do-output-to","output-to","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","garden.compiler/compile-css","seq56213","G__56214","cljs.core/next","self__4717__auto__","vec__56215","cljs.core/some","cljs.core/keys","cljs.core/chunk-first"]],"~:used-vars",["^J",["~$cljs.core/mapcat","~$clojure.string/join","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$garden.compiler/comma-separated-list","~$garden.compiler/media-expression-behavior","~$garden.compiler/render-at-rule","~$cljs.core/str","~$garden.compiler/*flags*","~$cljs.core/PersistentHashMap","~$garden.compiler/CSSRenderer","~$cljs.core/MultiFn","~$cljs.core/sequential?","~$garden.color/as-hex","~$cljs.core/Cons","~$js/RegExp","~$garden.compiler/render-media-expr-part","~$garden.compiler/expand-declaration","~$garden.compiler/do-output-to","~$js/garden.compiler.render-at-rule","~$garden.compiler/indent-loc-re","~$garden.compiler/semicolon","~$cljs.core/PersistentArrayMap","~$garden.compiler/expand-stylesheet","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/NodeSeq","~$garden.util/at-import?","~$cljs.core/partial","~$garden.compiler/rule-join","~$cljs.core/IndexedSeq","~$garden.types/CSSUnit","~$garden.color/CSSColor","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/Keyword","~$garden.compiler/r-brace","~$garden.compiler/comma","~$garden.compiler/prefix-auto-properties","~$garden.compiler/expand-at-rule","~$js/garden.compiler.expand-at-rule","~$cljs.core/last","~$garden.compiler/expand-declaration-1","~$garden.compiler/prefixed-blocks","~$cljs.core/BlackNode","~$garden.compiler/expand-media-query-expression","~$garden.compiler/l-brace-1","~$cljs.core/LazySeq","~$garden.compiler/render-color","~$cljs.core/Subvec","~$cljs.core/concat","~$garden.compiler/r-brace-1","~$garden.compiler/top-level-expression?","~$cljs.core/ArrayNodeSeq","~$js/garden","~$garden.compiler/expand-rule","~$cljs.core/set","~$garden.compiler/render-property-and-value","~$garden.compiler/rule-sep","~$garden.compiler/compile-style","~$garden.compiler/render-function","~$garden.compiler/expand","~$cljs.core/empty?","~$cljs.core/contains?","~$garden.compiler/render-css","~$garden.compiler/prefix-all-properties","~$cljs.core/map?","~$garden.compiler/do-compile","~$garden.util/at-media?","~$garden.compiler/render-media-expr","~$cljs.core/conj","~$garden.util/hash-map?","~$garden.types/CSSFunction","~$garden.util/to-str","~$cljs.core/with-meta","~$cljs.core/juxt","~$cljs.core/map","~$cljs.core/PersistentArrayMapSeq","~$js/garden.compiler","~$garden.compiler/l-brace","~$cljs.core/PersistentVector","~$cljs.core/get-in","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/-add-method","~$garden.compiler/expand-selector","~$goog.object/set","~$cljs.core/remove","~$garden.compiler/indent","~$cljs.core/partition","~$cljs.core/RSeq","~$cljs.core/symbol","~$garden.types/CSSAtRule","~$cljs.core/missing-protocol","~$garden.compiler/*media-query-context*","~$garden.util/format","~$garden.compiler/render-value","~$cljs.core/set?","~$garden.compiler/indent-str","~$cljs.core/nil?","~$cljs.core/meta","~$garden.compiler/divide-vec","~$garden.compiler/parent-selector-re","~$cljs.core/interleave","~$garden.compiler/prefix-declaration","~$garden.compiler/render-unit","~$garden.util/as-str","~$cljs.core/PersistentTreeMap","~$garden.compiler/extract-reference","~$cljs.core/ChunkedSeq","~$garden.compression/compress-stylesheet","~$cljs.core/not","~$garden.util/at-keyframes?","~$cljs.core/cons","~$cljs.core/assoc","~$cljs.core/ChunkedCons","~$garden.compiler/*selector-context*","~$garden.compiler/expand-seqs","~$garden.compiler/render-declaration","~$cljs.core/repeat","~$garden.compiler/do-preamble","~$garden.compiler/render-selector","~$garden.compiler/auto-prefix?","~$garden.compiler/space-separated-list","~$cljs.core/first","~$cljs.core/butlast","~$cljs.core/seq?","~$garden.compiler/compile-css","~$cljs.core/name","~$garden.compiler/do-compression","~$garden.compiler/IExpandable","~$cljs.core/merge","~$cljs.core/every?","~$garden.compiler/expand-selector-reference","~$js/Error","~$garden.compiler/auto-prefixed-properties","~$garden.compiler/colon","~$garden.util/declaration?","~$garden.compiler/add-blocks","~$garden.compiler/render-rule","~$garden.compiler/vendors","~$cljs.core/RedNode"]]],"~:cache-keys",["~#cmap",[["^1K","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^10","~$goog.dom.HtmlElement"]]],["^1K","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^19","~$goog.string"]]],["^1K","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","~$goog.array","~$goog.asserts"]]],["^1K","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5="]]],["^1K","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1K","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5B"]]],["^1K","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?"]]],["^1K","garden/color.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^19","^11"]]],["^1K","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","garden/units.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","~$cljs.reader","^Z","^11"]]],["^1K","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5=","~$goog.string.StringBuffer"]]],["^1K","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^["]]],["^1K","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^5K","^5L","^5M","^5J","^5>","^5=","^5O"]]],["^1K","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?"]]],"~:SHADOW-TIMESTAMP",[1608738513000,1608738513000,1561026596000],["^1K","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","~$goog.reflect"]]],["^1K","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","~$goog.html.trustedtypes","^5E","^5F","^5G","^5H"]]],["^1K","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5?","~$goog.html.SafeUrl","^5G","^5H","^5B"]]],["^1K","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^5S","^5D","~$goog.html.uncheckedconversions","^5G","^5B"]]],["^1K","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1K","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5?","~$goog.dom.TagName","~$goog.dom.tags","^5W","^5X","~$goog.html.SafeStyleSheet","^5S","^5D","^5R","^5E","^5F","~$goog.labs.userAgent.browser","^5A","^5G","^5H","^5B"]]],["^1K","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5A"]]],["^1K","cljs/reader.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^5A","^5N","~$cljs.tools.reader.edn","^5O"]]],["^1K","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1K","garden/types.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^["]]],["^1K","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5?","^5=","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","garden/selectors.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^19"]]],["^1K","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",[]]],["^1K","garden/util.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^19","^Z","^5=","~$goog.string.format"]]],["^1K","garden/compression.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^["]]],["^1K","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5A"]]],["^1K","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^5K","^19","~$cljs.tools.reader.impl.inspect"]]],["^1K","clojure/string.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^5=","^5O"]]],["^1K","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","~$goog.dom.safe","^5Y","^5G","^5B"]]],["^1K","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5B"]]],["^1K","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^5L","^5=","^5O"]]],["^1K","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5?","^5U","~$goog.math"]]],["^1K","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","^5V","^5W","^5X","^62","^5S","^5D","^5G","^5B"]]],["^1K","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^5J","^5K","^5L"]]],["^1K","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10"]]],["^1K","cljs/core.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","~$goog.math.Long","~$goog.math.Integer","^5=","^5A","^5>","~$goog.Uri","^5O"]]],["^1K","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","^5R","^5G","^5H"]]],["^1K","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5?","^5X","^5A","^5G","^5H","^5B"]]],["^1K","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5Q"]]],["^1K","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5>","^5?","^5="]]],["^1K","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^5?","^5H"]]],["^1K","garden/compiler.cljc"],["d650714a7e264d53b6819416dc51697acc6e4793","^58",["^ ","^59",null,"^5:",["^J",[]],"^5;",["^10","^[","^19","^13","^17","^14","^Y","^11","^Z"]]]]],"~:clj-info",["^ ","jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1561026596000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/selectors.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1555623369000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/units.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/color.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1602861476000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/compiler.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/util.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1555623369000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/compression.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1602861476000,"jar:file:/home/victor/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1561026614000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1555623369000,"jar:file:/home/victor/.m2/repository/garden/garden/1.3.5/garden-1.3.5.jar!/garden/types.cljc",1561026647000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1602063594000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Functions for compiling Clojure data structures to CSS.","^7","garden/compiler.cljc","^8",1,"^9",5,"^:",1,"^;",20],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"~:shadow/protocol-prefixes",["^J",["garden$compiler$IExpandable$","garden$compiler$CSSRenderer$"]],"^E",["^ ","^F","^G","^H","^G"],"^I",["^J",[]],"^K",["^ ","^F",["^ ","^L",["^M",[["^N","~$&","^O"]]],"^8",82,"^9",1,"^7","garden/compiler.cljc","^P","^Q","^R","^G","^S",true],"^H",["^ ","^L",["^M",[["^N","~$&","^O"]]],"^8",77,"^9",1,"^7","garden/compiler.cljc","^P","^T","^R","^G","^S",true]],"^P","^G","^V",null,"^W",["^ ","^X","^Y","^Y","^Y","^Z","^Z","^[","^[","^10","^10","^11","^11","^12","^13","^14","^14","^15","^11","^16","^17","^18","^19","^13","^13","^19","^19","^17","^17","^1:","^14"],"^1;",["^J",["^1<","^1="]],"~:shadow/js-access-global",["^J",["RegExp","Error"]],"^1>",["^ ","^1?","^13","^1@","^Z","^1A","^Z","^1B","^Z"],"~:defs",["^ ","~$r-brace",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",359,"^9",16,"^:",359,"^;",23,"~:private",true],"^7?",true,"^P","^2P","^7","garden/compiler.cljc","^;",23,"^9",1,"^8",359,"^:",359,"~:tag","^18"],"~$extract-reference",["^ ","~:protocol-inline",null,"^5",["^ ","^7","garden/compiler.cljc","^8",182,"^9",8,"^:",182,"^;",25,"^7?",true,"^L",["^M",["~$quote",["^M",[["~$selector"]]]]],"^6","Extract the selector portion of a parent selector reference."],"^7?",true,"^P","^4@","^7","garden/compiler.cljc","^;",25,"~:method-params",["^M",[["^7D"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^9",1,"~:variadic?",false,"^8",182,"~:ret-tag",["^J",["~$any","~$clj-nil"]],"^:",182,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^7C",["^M",[["^7D"]]]]],"^6","Extract the selector portion of a parent selector reference."],"~$expand-declaration-1",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",150,"^9",7,"^:",150,"^;",27,"^L",["^M",["^7C",["^M",[["~$declaration"]]]]]],"^P","^2V","^7","garden/compiler.cljc","^;",27,"^7E",["^M",[["^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",150,"^7I",["^J",[null,"^7J"]],"^:",150,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]]],"~$render-color",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",541,"^9",17,"^:",541,"^;",29,"^7?",true,"^L",["^M",["^7C",["^M",[["~$c"]]]]]],"^7?",true,"^P","^30","^7","garden/compiler.cljc","^;",29,"^7E",["^M",[["~$c"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",541,"^7I",["^J",[null,"^7J"]],"^:",541,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["~$c"]]]]]],"~$top-level-expression?",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",101,"^9",8,"^:",101,"^;",29,"^7?",true,"^L",["^M",["^7C",["^M",[["~$x"]]]]]],"^7?",true,"^P","^34","^7","garden/compiler.cljc","^;",29,"^7E",["^M",[["~$x"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",101,"^7I",["^J",["~$boolean","^7J"]],"^:",101,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["~$x"]]]]]],"~$expand-seqs",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",137,"^9",8,"^:",137,"^;",19,"^7?",true,"^L",["^M",["^7C",["^M",[["~$coll"]]]]],"^6","Like flatten but only affects seqs."],"^7?",true,"^P","^4I","^7","garden/compiler.cljc","^;",19,"^7E",["^M",[["^7T"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",137,"^7I","^7J","^:",137,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7T"]]]]],"^6","Like flatten but only affects seqs."],"~$render-selector",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",474,"^9",8,"^:",474,"^;",23,"^7?",true,"^L",["^M",["^7C",["^M",[["^7D"]]]]]],"^7?",true,"^P","^4M","^7","garden/compiler.cljc","^;",23,"^7E",["^M",[["^7D"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",474,"^7I","^7J","^:",474,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7D"]]]]]],"~$render-declaration",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",465,"^9",8,"^:",465,"^;",26,"^7?",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]]],"^7?",true,"^P","^4J","^7","garden/compiler.cljc","^;",26,"^7E",["^M",[["^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",465,"^7I","~$js","^:",465,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]]],"~$do-preamble",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",717,"^9",8,"^:",717,"^;",19,"^7?",true,"^L",["^M",["^7C",["^M",[[["^ ","~:keys",["~$preamble"]],"~$stylesheet"]]]]],"^6","Prefix stylesheet with files in preamble. Not available in\n  ClojureScript."],"^7?",true,"^P","^4L","^7","garden/compiler.cljc","^;",19,"^7E",["^M",[["~$p__56204","^7["]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",717,"^:",717,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[[["^ ","^7Y",["^7Z"]],"^7["]]]]],"^6","Prefix stylesheet with files in preamble. Not available in\n  ClojureScript."],"~$auto-prefix?",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",97,"^9",8,"^:",97,"^;",20,"^7?",true,"^L",["^M",["^7C",["^M",[["~$property"]]]]]],"^7?",true,"^P","^4N","^7","garden/compiler.cljc","^;",20,"^7E",["^M",[["^82"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",97,"^7I","^7R","^:",97,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^82"]]]]]],"~$render-function",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",532,"^9",8,"^:",532,"^;",23,"^7?",true,"^L",["^M",["^7C",["^M",[["~$css-function"]]]]],"^6","Render a CSS function."],"^7?",true,"^P","^3<","^7","garden/compiler.cljc","^;",23,"^7E",["^M",[["^84"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",532,"^7I","^7J","^:",532,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^84"]]]]],"^6","Render a CSS function."],"~$expand",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",131,"^9",4,"^:",131,"^;",10,"~:protocol","^4V","^6","Return a list containing the expanded form of `this`.","^L",["^M",["^7C",["^M",[["~$this"]]]]]],"^86","^4V","^P","^3=","^7","garden/compiler.cljc","^;",10,"^7E",["^M",[["^87"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",130,"^7I","^7J","^:",131,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^87"]]]]],"^6","Return a list containing the expanded form of `this`."],"~$compile-css",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",743,"^9",7,"^:",743,"^;",18,"^L",["^M",["^7C",["^M",[["~$flags","~$&","~$rules"]]]]],"^6","Convert any number of Clojure data structures to CSS.","~:top-fn",["^ ","^7H",true,"~:fixed-arity",1,"^7L",1,"^7E",[["^M",["^89","^8:"]]],"^L",["^M",[["^89","~$&","^8:"]]],"^7G",["^M",[null]]]],"^P","^4S","^7","garden/compiler.cljc","^;",18,"^8;",["^ ","^7H",true,"^8<",1,"^7L",1,"^7E",[["^M",["^89","^8:"]]],"^L",["^M",[["^89","~$&","^8:"]]],"^7G",["^M",[null]]],"^7E",[["^M",["^89","^8:"]]],"^7F",null,"^8<",1,"^7G",["^M",[null]],"^9",1,"^7H",true,"~:methods",[["^ ","^8<",1,"^7H",true,"^7@","^7J"]],"^8",743,"^7I","^7J","^:",743,"^7L",1,"^7M",true,"^L",["^M",[["^89","~$&","^8:"]]],"^6","Convert any number of Clojure data structures to CSS."],"~$IExpandable",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",130,"^9",14,"^:",130,"^;",25,"~:protocol-symbol",true,"~:jsdoc",["^M",["@interface"]],"~:protocol-info",["^ ","^8=",["^ ","^85",[["^87"]]]]],"^8?",true,"^P","^4V","^7","garden/compiler.cljc","^;",25,"^9",1,"^8",130,"^8A",["^ ","^8=",["^ ","^85",[["^87"]]]],"~:info",null,"^:",130,"^7@","^7J","~:impls",["^J",[null,"^24","^29","^2A","^2E","^2I","^2K","^2X","^2[","^31","^35","^3H","~$default","^3M","^3P","^3R","^3Z","^40","^4?","^4A","^4G","^55"]],"^8@",["^M",["@interface"]]],"~$render-media-expr",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",505,"^9",8,"^:",505,"^;",25,"^7?",true,"^L",["^M",["^7C",["^M",[["~$expr"]]]]],"^6","Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n\n    `true`  as in `{:screen true}`  == \"screen\"\n    `false` as in `{:screen false}` == \"not screen\"\n    `:only` as in `{:screen :only}  == \"only screen\""],"^7?",true,"^P","^3E","^7","garden/compiler.cljc","^;",25,"^7E",["^M",[["^8F"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",505,"^7I",["^J",["^7J","^7W"]],"^:",505,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^8F"]]]]],"^6","Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n\n    `true`  as in `{:screen true}`  == \"screen\"\n    `false` as in `{:screen false}` == \"not screen\"\n    `:only` as in `{:screen :only}  == \"only screen\""],"~$auto-prefixed-properties",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",92,"^9",8,"^:",92,"^;",32,"^7?",true,"^L",["^M",["^7C",["^M",[[]]]]],"^6","Return the current list of auto-prefixed properties specified in `*flags*`."],"^7?",true,"^P","^4[","^7","garden/compiler.cljc","^;",32,"^7E",["^M",[[]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",92,"^7I",["^J",["~$clj","^7J","~$cljs.core/ISet","~$cljs.core/MetaFn","^7K"]],"^:",92,"^7L",0,"^7M",true,"^L",["^M",["^7C",["^M",[[]]]]],"^6","Return the current list of auto-prefixed properties specified in `*flags*`."],"~$l-brace",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",358,"^9",16,"^:",358,"^;",23,"^7?",true],"^7?",true,"^P","^3O","^7","garden/compiler.cljc","^;",23,"^9",1,"^8",358,"^:",358,"^7@","^18"],"~$comma-separated-list",["^ ","^7B",null,"^5",["^ ","^7?",true,"^7","garden/compiler.cljc","^;",28,"^8;",["^ ","^7H",false,"^8<",2,"^7L",2,"^7E",["^M",[["~$xs"],["~$f","^8M"]]],"^L",["^M",[["^8M"],["~$f","^8M"]]],"^7G",["^M",[null,null]]],"^9",8,"^8",372,"^:",372,"^L",["^M",["^7C",["^M",[["^8M"],["~$f","^8M"]]]]],"^6","Return a comma separated list of values. Subsequences are joined with\n   spaces."],"^7?",true,"^P","^1[","^7","garden/compiler.cljc","^;",28,"^8;",["^ ","^7H",false,"^8<",2,"^7L",2,"^7E",["^M",[["^8M"],["~$f","^8M"]]],"^L",["^M",[["^8M"],["~$f","^8M"]]],"^7G",["^M",[null,null]]],"^7E",["^M",[["^8M"],["~$f","^8M"]]],"^7F",null,"^8<",2,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8=",[["^ ","^8<",1,"^7H",false,"^7@","^7J"],["^ ","^8<",2,"^7H",false,"^7@","^7W"]],"^8",372,"^:",372,"^7L",2,"^7M",true,"^L",["^M",[["^8M"],["~$f","^8M"]]],"^6","Return a comma separated list of values. Subsequences are joined with\n   spaces."],"~$render-at-rule",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",551,"^9",21,"^:",551,"^;",35,"^7?",true,"^6","Render a CSS at-rule"],"^7?",true,"^P","^21","^7","garden/compiler.cljc","^;",35,"^9",1,"^8",551,"^:",551,"^7@","^26","^6","Render a CSS at-rule"],"~$expand-selector",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",200,"^9",8,"^:",200,"^;",23,"^7?",true,"^L",["^M",["^7C",["^M",[["^7D","~$parent"]]]]]],"^7?",true,"^P","^3U","^7","garden/compiler.cljc","^;",23,"^7E",["^M",[["^7D","^8P"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",200,"^7I","^2[","^:",200,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["^7D","^8P"]]]]]],"~$*flags*",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",27,"^9",3,"^:",27,"^;",10,"~:dynamic",true,"^7?",true,"^6","The current compiler flags."],"^7?",true,"^P","^23","^7","garden/compiler.cljc","^;",10,"^9",1,"^8R",true,"^8",23,"^:",27,"^7@","~$cljs.core/IMap","^6","The current compiler flags."],"~$expand-declaration",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",166,"^9",8,"^:",166,"^;",26,"^7?",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]]],"^7?",true,"^P","^2<","^7","garden/compiler.cljc","^;",26,"^7E",["^M",[["^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",166,"^7I",["^J",[null,"^8H","^8J","^7K"]],"^:",166,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]]],"~$indent",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",363,"^9",16,"^:",363,"^;",22,"^7?",true],"^7?",true,"^P","^3X","^7","garden/compiler.cljc","^;",22,"^9",1,"^8",363,"^:",363,"^7@","^18"],"~$render-media-expr-part",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",493,"^9",8,"^:",493,"^;",30,"^7?",true,"^L",["^M",["^7C",["^M",[[["~$k","~$v"]]]]]],"^6","Render the individual components of a media expression."],"^7?",true,"^P","^2;","^7","garden/compiler.cljc","^;",30,"^7E",["^M",[["~$p__56169"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",493,"^7I",["^J",[null,"^7J","^18","^7K"]],"^:",493,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[[["~$k","~$v"]]]]]],"^6","Render the individual components of a media expression."],"~$do-output-to",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",734,"^9",8,"^:",734,"^;",20,"^7?",true,"^L",["^M",["^7C",["^M",[[["^ ","^7Y",["~$output-to"]],"^7["]]]]],"^6","Write contents of stylesheet to disk."],"^7?",true,"^P","^2=","^7","garden/compiler.cljc","^;",20,"^7E",["^M",[["~$p__56210","^7["]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",734,"^:",734,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[[["^ ","^7Y",["^8Y"]],"^7["]]]]],"^6","Write contents of stylesheet to disk."],"~$indent-loc-re",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",391,"^9",3,"^:",391,"^;",16,"^7?",true,"^6","Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name."],"^7?",true,"^P","^2?","^7","garden/compiler.cljc","^;",16,"^9",1,"^8",387,"^:",391,"^7@","^2:","^6","Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name."],"~$expand-stylesheet",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",267,"^9",8,"^:",267,"^;",25,"^7?",true,"^L",["^M",["^7C",["^M",[["^8M"]]]]]],"^7?",true,"^P","^2B","^7","garden/compiler.cljc","^;",25,"^7E",["^M",[["^8M"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",267,"^7I","^7J","^:",267,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^8M"]]]]]],"~$*media-query-context*",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",72,"^9",3,"^:",72,"^;",24,"^8R",true,"^7?",true,"^6","The current media query context."],"^7?",true,"^P","^42","^7","garden/compiler.cljc","^;",24,"^9",1,"^8R",true,"^8",68,"^:",72,"^7@","^7K","^6","The current media query context."],"~$render-value",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",406,"^9",8,"^:",406,"^;",20,"^7?",true,"^L",["^M",["^7C",["^M",[["~$x"]]]]],"^6","Render the value portion of a declaration."],"^7?",true,"^P","^44","^7","garden/compiler.cljc","^;",20,"^7E",["^M",[["~$x"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",406,"^7I",["^J",["~$String","^7J"]],"^:",406,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["~$x"]]]]],"^6","Render the value portion of a declaration."],"~$indent-str",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",397,"^9",8,"^:",397,"^;",18,"^7?",true,"^L",["^M",["^7C",["^M",[["~$s"]]]]]],"^7?",true,"^P","^46","^7","garden/compiler.cljc","^;",18,"^7E",["^M",[["~$s"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",397,"^7I","^7J","^:",397,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["~$s"]]]]]],"~$parent-selector-re",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",179,"^9",3,"^:",179,"^;",21,"^7?",true,"^6","Matches a single \"&\" or \"&\" follow by one or more\n  non-whitespace characters."],"^7?",true,"^P","^4:","^7","garden/compiler.cljc","^;",21,"^9",1,"^8",175,"^:",179,"^7@","^7J","^6","Matches a single \"&\" or \"&\" follow by one or more\n  non-whitespace characters."],"~$prefix-declaration",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",455,"^9",8,"^:",455,"^;",26,"^7?",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]],"^6","Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set."],"^7?",true,"^P","^4<","^7","garden/compiler.cljc","^;",26,"^7E",["^M",[["^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",455,"^7I","^7J","^:",455,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7O"]]]]],"^6","Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set."],"~$prefix-auto-properties",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",444,"^9",8,"^:",444,"^;",30,"^7?",true,"^L",["^M",["^7C",["^M",[["~$vendors","^7O"]]]]],"^6","Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set."],"^7?",true,"^P","^2R","^7","garden/compiler.cljc","^;",30,"^7E",["^M",[["^98","^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",444,"^7I","^7J","^:",444,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["^98","^7O"]]]]],"^6","Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set."],"~$comma",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",355,"^9",16,"^:",355,"^;",21,"^7?",true],"^7?",true,"^P","^2Q","^7","garden/compiler.cljc","^;",21,"^9",1,"^8",355,"^:",355,"^7@","^18"],"~$expand-at-rule",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",226,"^9",21,"^:",226,"^;",35,"^7?",true],"^7?",true,"^P","^2S","^7","garden/compiler.cljc","^;",35,"^9",1,"^8",226,"^:",226,"^7@","^26"],"~$prefixed-blocks",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",431,"^9",8,"^:",431,"^;",23,"^7?",true,"^L",["^M",["^7C",["^M",[["^98",["~$p","~$v"]]]]]],"^6","Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`."],"^7?",true,"^P","^2W","^7","garden/compiler.cljc","^;",23,"^7E",["^M",[["^98","~$p__56154"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",431,"^7I","^2[","^:",431,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["^98",["~$p","~$v"]]]]]],"^6","Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`."],"~$expand-media-query-expression",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",244,"^9",8,"^:",244,"^;",37,"^7?",true,"^L",["^M",["^7C",["^M",[["~$expression"]]]]]],"^7?",true,"^P","^2Y","^7","garden/compiler.cljc","^;",37,"^7E",["^M",[["^9>"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",244,"^7I",["^J",[null,"^7J"]],"^:",244,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^9>"]]]]]],"~$l-brace-1",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",360,"^9",16,"^:",360,"^;",25,"^7?",true],"^7?",true,"^P","^2Z","^7","garden/compiler.cljc","^;",25,"^9",1,"^8",360,"^:",360,"^7@","^18"],"~$*selector-context*",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",66,"^9",3,"^:",66,"^;",21,"^8R",true,"^7?",true,"^6","The current parent selector context."],"^7?",true,"^P","^4H","^7","garden/compiler.cljc","^;",21,"^9",1,"^8R",true,"^8",62,"^:",66,"^7@","^7K","^6","The current parent selector context."],"~$r-brace-1",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",361,"^9",16,"^:",361,"^;",25,"^7?",true],"^7?",true,"^P","^33","^7","garden/compiler.cljc","^;",25,"^9",1,"^8",361,"^:",361,"^7@","^18"],"~$expand-rule",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",208,"^9",8,"^:",208,"^;",19,"^7?",true,"^L",["^M",["^7C",["^M",[["~$rule"]]]]]],"^7?",true,"^P","^37","^7","garden/compiler.cljc","^;",19,"^7E",["^M",[["^9C"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",208,"^7I","^8H","^:",208,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^9C"]]]]]],"~$rule-sep",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",362,"^9",16,"^:",362,"^;",24,"^7?",true],"^7?",true,"^P","^3:","^7","garden/compiler.cljc","^;",24,"^9",1,"^8",362,"^:",362,"^7@","^18"],"~$compile-style",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",697,"^9",7,"^:",697,"^;",20,"^L",["^M",["^7C",["^M",[["~$ms"]]]]],"^6","Convert a sequence of maps into CSS for use with the HTML style\n   attribute."],"^P","^3;","^7","garden/compiler.cljc","^;",20,"^7E",["^M",[["^9F"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",697,"^7I",["^J",["^7J","^7K"]],"^:",697,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^9F"]]]]],"^6","Convert a sequence of maps into CSS for use with the HTML style\n   attribute."],"~$space-separated-list",["^ ","^7B",null,"^5",["^ ","^7?",true,"^7","garden/compiler.cljc","^;",28,"^8;",["^ ","^7H",false,"^8<",2,"^7L",2,"^7E",["^M",[["^8M"],["~$f","^8M"]]],"^L",["^M",[["^8M"],["~$f","^8M"]]],"^7G",["^M",[null,null]]],"^9",8,"^8",365,"^:",365,"^L",["^M",["^7C",["^M",[["^8M"],["~$f","^8M"]]]]],"^6","Return a space separated list of values."],"^7?",true,"^P","^4O","^7","garden/compiler.cljc","^;",28,"^8;",["^ ","^7H",false,"^8<",2,"^7L",2,"^7E",["^M",[["^8M"],["~$f","^8M"]]],"^L",["^M",[["^8M"],["~$f","^8M"]]],"^7G",["^M",[null,null]]],"^7E",["^M",[["^8M"],["~$f","^8M"]]],"^7F",null,"^8<",2,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8=",[["^ ","^8<",1,"^7H",false,"^7@","^7J"],["^ ","^8<",2,"^7H",false,"^7@","^7W"]],"^8",365,"^:",365,"^7L",2,"^7M",true,"^L",["^M",[["^8M"],["~$f","^8M"]]],"^6","Return a space separated list of values."],"~$render-property-and-value",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",413,"^9",8,"^:",413,"^;",33,"^7?",true,"^L",["^M",["^7C",["^M",[[["~$prop","~$val"]]]]]]],"^7?",true,"^P","^39","^7","garden/compiler.cljc","^;",33,"^7E",["^M",[["~$p__56149"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",413,"^7I",["^J",["^7J","^7W"]],"^:",413,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[[["^9I","^9J"]]]]]]],"~$render-css",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",349,"^9",4,"^:",349,"^;",14,"^86","^25","^6","Convert a Clojure data type in to a string of CSS.","^L",["^M",["^7C",["^M",[["^87"]]]]]],"^86","^25","^P","^3@","^7","garden/compiler.cljc","^;",14,"^7E",["^M",[["^87"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",348,"^7I","^7J","^:",349,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^87"]]]]],"^6","Convert a Clojure data type in to a string of CSS."],"~$prefix-all-properties",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",438,"^9",8,"^:",438,"^;",29,"^7?",true,"^L",["^M",["^7C",["^M",[["^98","^7O"]]]]],"^6","Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`."],"^7?",true,"^P","^3A","^7","garden/compiler.cljc","^;",29,"^7E",["^M",[["^98","^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",438,"^7I","^7J","^:",438,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["^98","^7O"]]]]],"^6","Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`."],"~$do-compile",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",707,"^9",8,"^:",707,"^;",18,"^7?",true,"^L",["^M",["^7C",["^M",[["^89","^8:"]]]]],"^6","Return a string of CSS."],"^7?",true,"^P","^3C","^7","garden/compiler.cljc","^;",18,"^7E",["^M",[["^89","^8:"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",707,"^:",707,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["^89","^8:"]]]]],"^6","Return a string of CSS."],"~$expand-selector-reference",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",190,"^9",8,"^:",190,"^;",33,"^7?",true,"^L",["^M",["^7C",["^M",[["^7D"]]]]]],"^7?",true,"^P","^4Y","^7","garden/compiler.cljc","^;",33,"^7E",["^M",[["^7D"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",190,"^7I",["^J",[null,"^2["]],"^:",190,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^7D"]]]]]],"~$do-compression",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",726,"^9",8,"^:",726,"^;",22,"^7?",true,"^L",["^M",["^7C",["^M",[[["^ ","^7Y",["~$pretty-print?","~$pretty-print"]],"^7["]]]]],"^6","Compress CSS if the pretty-print(?) flag is true."],"^7?",true,"^P","^4U","^7","garden/compiler.cljc","^;",22,"^7E",["^M",[["~$p__56207","^7["]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",726,"^7I",["^J",[null,"^18"]],"^:",726,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[[["^ ","^7Y",["^9Q","^9R"]],"^7["]]]]],"^6","Compress CSS if the pretty-print(?) flag is true."],"~$colon",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",356,"^9",16,"^:",356,"^;",21,"^7?",true],"^7?",true,"^P","^50","^7","garden/compiler.cljc","^;",21,"^9",1,"^8",356,"^:",356,"^7@","^18"],"~$add-blocks",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",425,"^9",8,"^:",425,"^;",18,"^7?",true,"^L",["^M",["^7C",["^M",[["~$f","^7O"]]]]],"^6","For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block."],"^7?",true,"^P","^52","^7","garden/compiler.cljc","^;",18,"^7E",["^M",[["~$f","^7O"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",425,"^7I","^7J","^:",425,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["~$f","^7O"]]]]],"^6","For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block."],"~$render-rule",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",478,"^9",8,"^:",478,"^;",19,"^7?",true,"^L",["^M",["^7C",["^M",[[["^7D","~$declarations","^1E","^9C"]]]]]],"^6","Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded."],"^7?",true,"^P","^53","^7","garden/compiler.cljc","^;",19,"^7E",["^M",[["~$p__56165"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",478,"^7I",["^J",["^18","^7K"]],"^:",478,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[[["^7D","^9W","^1E","^9C"]]]]]],"^6","Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded."],"^98",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",87,"^9",8,"^:",87,"^;",15,"^7?",true,"^L",["^M",["^7C",["^M",[[]]]]],"^6","Return the current list of browser vendors specified in `*flags*`."],"^7?",true,"^P","^54","^7","garden/compiler.cljc","^;",15,"^7E",["^M",[[]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",87,"^7I","~$seq","^:",87,"^7L",0,"^7M",true,"^L",["^M",["^7C",["^M",[[]]]]],"^6","Return the current list of browser vendors specified in `*flags*`."],"~$media-expression-behavior",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",58,"^9",3,"^:",58,"^;",28,"^7?",true,"^6","Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries."],"^7?",true,"^P","^20","^7","garden/compiler.cljc","^;",28,"^9",1,"^8",51,"^:",58,"^7@","^8S","^6","Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries."],"~$CSSRenderer",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",348,"^9",14,"^:",348,"^;",25,"^8?",true,"^8@",["^M",["@interface"]],"^8A",["^ ","^8=",["^ ","^9L",[["^87"]]]]],"^8?",true,"^P","^25","^7","garden/compiler.cljc","^;",25,"^9",1,"^8",348,"^8A",["^ ","^8=",["^ ","^9L",[["^87"]]]],"^8B",null,"^:",348,"^7@","^7J","^8C",["^J",[null,"^24","^29","^2A","^2E","^2I","^2J","^2K","^2O","^2X","^2[","^31","^35","~$number","^3H","^8D","^3M","^3P","^3R","^3Z","^40","^4?","^4A","^4G","^55"]],"^8@",["^M",["@interface"]]],"~$semicolon",["^ ","^5",["^ ","^7","garden/compiler.cljc","^8",357,"^9",16,"^:",357,"^;",25,"^7?",true],"^7?",true,"^P","^2@","^7","garden/compiler.cljc","^;",25,"^9",1,"^8",357,"^:",357,"^7@","^18"],"~$rule-join",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",384,"^9",8,"^:",384,"^;",17,"^7?",true,"^L",["^M",["^7C",["^M",[["^8M"]]]]]],"^7?",true,"^P","^2H","^7","garden/compiler.cljc","^;",17,"^7E",["^M",[["^8M"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",384,"^7I","^7W","^:",384,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^8M"]]]]]],"~$divide-vec",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",107,"^9",8,"^:",107,"^;",18,"^7?",true,"^L",["^M",["^7C",["^M",[["~$pred","^7T"]]]]],"^6","Return a vector of [(filter pred coll) (remove pred coll)]."],"^7?",true,"^P","^49","^7","garden/compiler.cljc","^;",18,"^7E",["^M",[["^:4","^7T"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",107,"^7I","^7J","^:",107,"^7L",2,"^7M",true,"^L",["^M",["^7C",["^M",[["^:4","^7T"]]]]],"^6","Return a vector of [(filter pred coll) (remove pred coll)]."],"~$render-unit",["^ ","^7B",null,"^5",["^ ","^7","garden/compiler.cljc","^8",522,"^9",8,"^:",522,"^;",19,"^7?",true,"^L",["^M",["^7C",["^M",[["~$css-unit"]]]]],"^6","Render a CSSUnit."],"^7?",true,"^P","^4=","^7","garden/compiler.cljc","^;",19,"^7E",["^M",[["^:6"]]],"^7F",null,"^7G",["^M",[null,null]],"^9",1,"^7H",false,"^8",522,"^7I","^18","^:",522,"^7L",1,"^7M",true,"^L",["^M",["^7C",["^M",[["^:6"]]]]],"^6","Render a CSSUnit."]],"^1=",["^ ","^G","^G","^[","^[","^X","^Y","^Y","^Y","^12","^13","^14","^14","^13","^13","^1:","^14"],"~:cljs.analyzer/constants",["^ ","^1;",["^J",["~:args","~:hue","~:else","~:pretty-print?","~:saturation","~:unit","~:default","~:frames","~:value","~:auto-prefix","~:media-expressions","~:magnitude","~:rules","~:merge","~:prefix","~:vendors","~:output-to","~:preamble","~:media-queries","~:keyframes","~:nesting-behavior","~:url","~:identifier","~:lightness","~:alpha","~:f","~:import","~:hierarchy","~:pretty-print","~:media"]],"~:order",["^:;","^:I","^:H","^:G","^:A","^:B","^:L","^:>","^:E","^:R","^:N","^:K","^:@","^:?","^:T","^:J","^:D","^:F","^::","^:C","^:=","~:f","^:8","^:P","^:9","^:<","^:O","^:Q","^:M","^:S"]],"^1G",["^ ","^1<",["^J",[]],"^1=",["^J",[]]],"^1H",["^ "],"^1I",["^10","^[","^19","^13","^17","^14","^Y","^11","^Z"]],"^R","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^57",[["^:X","~:static-fns"],true,["^:X","~:shadow-tweaks"],null,["^:X","~:source-map-inline"],null,["^:X","~:elide-asserts"],false,["^:X","~:optimize-constants"],null,["^:X","^1N"],null,["^:X","~:external-config"],null,["^:X","~:tooling-config"],null,["^:X","~:emit-constants"],null,["^:X","~:load-tests"],null,["^:X","~:form-size-threshold"],null,["^:X","~:data-readers"],null,["^:X","~:infer-externs"],"~:auto",["^:X","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:X","~:fn-invoke-direct"],null,["^:X","~:source-map"],"/dev/null"]]]