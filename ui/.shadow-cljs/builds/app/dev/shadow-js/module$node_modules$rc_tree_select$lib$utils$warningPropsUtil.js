["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rc-tree-select/lib/utils/warningPropsUtil.js"],"~:js","shadow$provide.module$node_modules$rc_tree_select$lib$utils$warningPropsUtil=function(global,require,module,exports){global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=void 0;var _typeof2=global(require(\"module$node_modules$$babel$runtime$helpers$typeof\")),_warning=global(require(\"module$node_modules$rc_util$lib$warning\")),_valueUtil=require(\"module$node_modules$rc_tree_select$lib$utils$valueUtil\");\nexports.default=function(props){var searchPlaceholder=props.searchPlaceholder,treeCheckStrictly=props.treeCheckStrictly,treeCheckable=props.treeCheckable,labelInValue=props.labelInValue,value=props.value;props=props.multiple;(0,_warning.default)(!searchPlaceholder,\"`searchPlaceholder` has been removed.\");treeCheckStrictly&&!1===labelInValue&&(0,_warning.default)(!1,\"`treeCheckStrictly` will force set `labelInValue` to `true`.\");(labelInValue||treeCheckStrictly)&&(0,_warning.default)((0,_valueUtil.toArray)(value).every(function(val){return val&&\n\"object\"===(0,_typeof2.default)(val)&&\"value\"in val}),\"Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\");treeCheckStrictly||props||treeCheckable?(0,_warning.default)(!value||Array.isArray(value),\"`value` should be an array when `TreeSelect` is checkable or multiple.\"):(0,_warning.default)(!Array.isArray(value),\"`value` should not be array when `TreeSelect` is single mode.\")}}","~:source","shadow$provide[\"module$node_modules$rc_tree_select$lib$utils$warningPropsUtil\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _valueUtil = require(\"./valueUtil\");\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  (0, _warning.default)(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    (0, _warning.default)(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    (0, _warning.default)((0, _valueUtil.toArray)(value).every(function (val) {\n      return val && (0, _typeof2.default)(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    (0, _warning.default)(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    (0, _warning.default)(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\n\nvar _default = warningProps;\nexports.default = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$rc_tree_select$lib$utils$valueUtil","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$shadow.js","~$module$node_modules$rc_util$lib$warning","~$module$node_modules$$babel$runtime$helpers$typeof"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1619101950058,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rc_tree_select$lib$utils$warningPropsUtil.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAe,6DAAf,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAE7BI,OAAA,CAAOC,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAA,CAAQK,OAAR,CAAkB,IAAK,EAEvB,KAAIC,SAAWL,MAAA,CAAuBH,OAAA,CAAQ,mDAAR,CAAvB,CAAf,CAEIS,SAAWN,MAAA,CAAuBH,OAAA,CAAQ,yCAAR,CAAvB,CAFf,CAIIU,WAAaV,OAAA,CAAQ,wDAAR,CA6BjBE;OAAA,CAAQK,OAAR,CA3BAI,QAAqB,CAACC,KAAD,CAAQ,CAAA,IACvBC,kBAAoBD,KAApBC,CAA0BA,iBADH,CAEvBC,kBAAoBF,KAApBE,CAA0BA,iBAFH,CAGvBC,cAAgBH,KAAhBG,CAAsBA,aAHC,CAIvBC,aAAeJ,KAAfI,CAAqBA,YAJE,CAKvBV,MAAQM,KAARN,CAAcA,KACdW,MAAAA,CAAWL,KAAXK,CAAiBA,QACrB,EAAC,CAAA,CAAGR,QAAH,CAAYF,OAAb,EAAsB,CAACM,iBAAvB,CAA0C,uCAA1C,CAEIC,kBAAJ,EAA0C,CAAA,CAA1C,GAAyBE,YAAzB,EACE,CAAC,CAAA,CAAGP,QAAH,CAAYF,OAAb,EAAsB,CAAA,CAAtB,CAA6B,8DAA7B,CAGF,EAAIS,YAAJ,EAAoBF,iBAApB,GACE,CAAC,CAAA,CAAGL,QAAH,CAAYF,OAAb,EAAsB,CAAC,CAAA,CAAGG,UAAH,CAAcQ,OAAf,EAAwBZ,KAAxB,CAAA,CAA+Ba,KAA/B,CAAqC,QAAS,CAACC,GAAD,CAAM,CACxE,MAAOA,IAAP;AAA6C,QAA7C,GAAc,CAAC,CAAA,CAAGZ,QAAH,CAAYD,OAAb,EAAsBa,GAAtB,CAAd,EAAyD,OAAzD,EAAoEA,IADI,CAApD,CAAtB,CAEI,iKAFJ,CAKEN,kBAAJ,EAAyBG,KAAzB,EAAqCF,aAArC,CACE,CAAC,CAAA,CAAGN,QAAH,CAAYF,OAAb,EAAsB,CAACD,KAAvB,EAAgCe,KAAA,CAAMC,OAAN,CAAchB,KAAd,CAAhC,CAAsD,wEAAtD,CADF,CAGE,CAAC,CAAA,CAAGG,QAAH,CAAYF,OAAb,EAAsB,CAACc,KAAA,CAAMC,OAAN,CAAchB,KAAd,CAAvB,CAA6C,+DAA7C,CAtByB,CAhB6F;\",\n\"sources\":[\"node_modules/rc-tree-select/lib/utils/warningPropsUtil.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rc_tree_select$lib$utils$warningPropsUtil\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\nvar _typeof2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/typeof\\\"));\\n\\nvar _warning = _interopRequireDefault(require(\\\"rc-util/lib/warning\\\"));\\n\\nvar _valueUtil = require(\\\"./valueUtil\\\");\\n\\nfunction warningProps(props) {\\n  var searchPlaceholder = props.searchPlaceholder,\\n      treeCheckStrictly = props.treeCheckStrictly,\\n      treeCheckable = props.treeCheckable,\\n      labelInValue = props.labelInValue,\\n      value = props.value,\\n      multiple = props.multiple;\\n  (0, _warning.default)(!searchPlaceholder, '`searchPlaceholder` has been removed.');\\n\\n  if (treeCheckStrictly && labelInValue === false) {\\n    (0, _warning.default)(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\\n  }\\n\\n  if (labelInValue || treeCheckStrictly) {\\n    (0, _warning.default)((0, _valueUtil.toArray)(value).every(function (val) {\\n      return val && (0, _typeof2.default)(val) === 'object' && 'value' in val;\\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\\n  }\\n\\n  if (treeCheckStrictly || multiple || treeCheckable) {\\n    (0, _warning.default)(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\\n  } else {\\n    (0, _warning.default)(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\\n  }\\n}\\n\\nvar _default = warningProps;\\nexports.default = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"default\",\"_typeof2\",\"_warning\",\"_valueUtil\",\"warningProps\",\"props\",\"searchPlaceholder\",\"treeCheckStrictly\",\"treeCheckable\",\"labelInValue\",\"multiple\",\"toArray\",\"every\",\"val\",\"Array\",\"isArray\"]\n}\n"]