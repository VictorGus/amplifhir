["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\nre_frame.core.dispatch = re_frame.router.dispatch;\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\nre_frame.core.subscribe = re_frame.subs.subscribe;\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\n/**\n * This is a low level, advanced function.  You should probably be\n *   using reg-sub instead.\n *   Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\n */\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\n});\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (db event) -> db\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of this\n * chain.\n */\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\nvar G__46033 = arguments.length;\nswitch (G__46033) {\ncase 2:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of the\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\n * and, later, action effects.\n */\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\nvar G__46035 = arguments.length;\nswitch (G__46035) {\ncase 2:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (context-map event-vector) -> context-map\n * \n *   This form of registration is almost never used. \n */\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\nvar G__46039 = arguments.length;\nswitch (G__46039) {\ncase 2:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3;\n\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nre_frame.core.debug = re_frame.std_interceptors.debug;\nre_frame.core.path = re_frame.std_interceptors.path;\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\nre_frame.core.after = re_frame.std_interceptors.after;\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\nre_frame.core.console = re_frame.loggers.console;\n/**\n * Checkpoints the state of re-frame and returns a function which, when\n *   later called, will restore re-frame to that checkpointed state.\n * \n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\n *   \n */\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\nvar app_db = cljs.core.deref(re_frame.db.app_db);\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\nreturn ((function (handlers,app_db,subs_cache){\nreturn (function (){\nvar original_subs_46086 = cljs.core.set(cljs.core.vals(subs_cache));\nvar current_subs_46087 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\nvar seq__46044_46088 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_46087,original_subs_46086));\nvar chunk__46045_46089 = null;\nvar count__46046_46090 = (0);\nvar i__46047_46091 = (0);\nwhile(true){\nif((i__46047_46091 < count__46046_46090)){\nvar sub_46092 = chunk__46045_46089.cljs$core$IIndexed$_nth$arity$2(null,i__46047_46091);\nre_frame.interop.dispose_BANG_(sub_46092);\n\n\nvar G__46093 = seq__46044_46088;\nvar G__46094 = chunk__46045_46089;\nvar G__46095 = count__46046_46090;\nvar G__46096 = (i__46047_46091 + (1));\nseq__46044_46088 = G__46093;\nchunk__46045_46089 = G__46094;\ncount__46046_46090 = G__46095;\ni__46047_46091 = G__46096;\ncontinue;\n} else {\nvar temp__5720__auto___46097 = cljs.core.seq(seq__46044_46088);\nif(temp__5720__auto___46097){\nvar seq__46044_46098__$1 = temp__5720__auto___46097;\nif(cljs.core.chunked_seq_QMARK_(seq__46044_46098__$1)){\nvar c__4550__auto___46099 = cljs.core.chunk_first(seq__46044_46098__$1);\nvar G__46100 = cljs.core.chunk_rest(seq__46044_46098__$1);\nvar G__46101 = c__4550__auto___46099;\nvar G__46102 = cljs.core.count(c__4550__auto___46099);\nvar G__46103 = (0);\nseq__46044_46088 = G__46100;\nchunk__46045_46089 = G__46101;\ncount__46046_46090 = G__46102;\ni__46047_46091 = G__46103;\ncontinue;\n} else {\nvar sub_46104 = cljs.core.first(seq__46044_46098__$1);\nre_frame.interop.dispose_BANG_(sub_46104);\n\n\nvar G__46105 = cljs.core.next(seq__46044_46098__$1);\nvar G__46106 = null;\nvar G__46107 = (0);\nvar G__46108 = (0);\nseq__46044_46088 = G__46105;\nchunk__46045_46089 = G__46106;\ncount__46046_46090 = G__46107;\ni__46047_46091 = G__46108;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\n\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\n\nreturn null;\n});\n;})(handlers,app_db,subs_cache))\n});\n/**\n * Remove all events queued for processing\n */\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null);\n});\n/**\n * Registers a function `f` to be called after each event is processed\n * `f` will be called with two arguments:\n *  - `event`: a vector. The event just processed.\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n * \n * This is useful in advanced cases like:\n *   - you are implementing a complex bootstrap pipeline\n *   - you want to create your own handling infrastructure, with perhaps multiple\n *     handlers for the one event, etc.  Hook in here.\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n * \n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n *   be used at \"remove time\" to get rid of the right callback.\n *   \n */\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\nvar G__46062 = arguments.length;\nswitch (G__46062) {\ncase 1:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\n});\n\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\n});\n\nre_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2;\n\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\n});\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___46110 = arguments.length;\nvar i__4731__auto___46111 = (0);\nwhile(true){\nif((i__4731__auto___46111 < len__4730__auto___46110)){\nargs__4736__auto__.push((arguments[i__4731__auto___46111]));\n\nvar G__46116 = (i__4731__auto___46111 + (1));\ni__4731__auto___46111 = G__46116;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__46064_46117 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__46065_46118 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\nvar G__46066_46119 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\nvar G__46067_46120 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__46064_46117,G__46065_46118,G__46066_46119,G__46067_46120) : re_frame.core.console.call(null,G__46064_46117,G__46065_46118,G__46066_46119,G__46067_46120));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\n});\n\nre_frame.core.register_handler.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.register_handler.cljs$lang$applyTo = (function (seq46063){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq46063));\n});\n\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___46121 = arguments.length;\nvar i__4731__auto___46122 = (0);\nwhile(true){\nif((i__4731__auto___46122 < len__4730__auto___46121)){\nargs__4736__auto__.push((arguments[i__4731__auto___46122]));\n\nvar G__46123 = (i__4731__auto___46122 + (1));\ni__4731__auto___46122 = G__46123;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__46071_46125 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__46072_46126 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\nvar G__46073_46127 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\nvar G__46074_46128 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__46071_46125,G__46072_46126,G__46073_46127,G__46074_46128) : re_frame.core.console.call(null,G__46071_46125,G__46072_46126,G__46073_46127,G__46074_46128));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\n});\n\nre_frame.core.register_sub.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.register_sub.cljs$lang$applyTo = (function (seq46068){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq46068));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^M","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^T","~$fx","~$re-frame.fx","~$re-frame.events","^W","~$loggers","~$re-frame.loggers","^V","^V","~$re-frame.registrar","^Z","~$cljs.core","^[","~$interceptor","^T","~$goog","^11","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^Z","^13","^13","^Q","^Q","~$events","^W","~$re-frame.std-interceptors","^18","^Y","^Y","^O","^O","~$interop","^M","~$std-interceptors","^18","^S","^S","^15","^15"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^18","~$fx-handler->interceptor","^18","~$ctx-handler->interceptor","^18"],"~:require-macros",["^ ","^[","^["],"~:form",["~#list",["~$ns","^H",["^1C",["^1<",["^W","~:as","^17"],["^O","^1E","^N"],["^M","^1E","^19"],["^15","^1E","^14"],["^V","^1E","^U"],["^S","^1E","^R"],["^13","^1E","^12"],["^Y","^1E","^X"],["^Z","^1E","^16"],["^T","^1E","^10"],["^18","^1E","^1:","~:refer",["^1>","^1?","^1@"]],["^Q","^1E","^P"]]]]],"~:flags",["^ ","^1<",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^11","^[","^W","^O","^M","^15","^V","^S","^13","^Y","^Z","^T","^18","^Q"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1619083332634,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","re-frame.router/dispatch","re-frame.core/dispatch-sync","re-frame.router/dispatch-sync","re-frame.core/reg-sub","re-frame.subs/reg-sub","re-frame.core/subscribe","re-frame.subs/subscribe","re-frame.core/clear-sub","cljs.core.partial","re-frame.registrar/clear-handlers","re-frame.subs/kind","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","query-id","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","re-frame.fx/reg-fx","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","re-frame.core/inject-cofx","re-frame.cofx/inject-cofx","re-frame.core/clear-cofx","re-frame.cofx/kind","var_args","G__46033","re-frame.core/reg-event-db","js/Error","id","handler","re_frame.core.reg_event_db","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/db-handler->interceptor","G__46035","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx","re-frame.std-interceptors/fx-handler->interceptor","G__46039","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx","re-frame.std-interceptors/ctx-handler->interceptor","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__46044","cljs.core/seq","chunk__46045","count__46046","i__46047","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__46062","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback","re-frame.core/remove-post-event-callback","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.core/register-handler","seq46063","self__4718__auto__","args","G__46064","G__46065","G__46066","G__46067","cljs.core.apply","re-frame.core/register-sub","seq46068","G__46071","G__46072","G__46073","G__46074"]],"~:used-vars",["^F",["~$re-frame.router/purge","~$re-frame.core/add-post-event-callback","~$re-frame.core/remove-post-event-callback","~$re-frame.interceptor/get-effect","~$re-frame.fx/kind","~$re-frame.core/clear-sub","~$re-frame.fx/reg-fx","~$re-frame.db/app-db","~$re-frame.core/clear-event","~$re-frame.core/register-sub","~$re-frame.core/assoc-coeffect","~$re-frame.fx/do-fx","~$re-frame.interop/dispose!","~$cljs.core/partial","~$re-frame.loggers/set-loggers!","~$re-frame.std-interceptors/debug","~$re-frame.core/dispatch","~$re-frame.interceptor/->interceptor","~$re-frame.core/on-changes","~$cljs.core/count","~$re-frame.events/register","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.events/kind","~$re-frame.core/enrich","~$re-frame.registrar/clear-handlers","~$re-frame.loggers/console","~$re-frame.core/get-coeffect","~$re-frame.core/assoc-effect","~$cljs.core/chunk-rest","~$re-frame.std-interceptors/trim-v","~$re-frame.core/reg-event-db","~$re-frame.core/reg-sub-raw","~$re-frame.core/dispatch-sync","~$re-frame.interceptor/enqueue","~$re-frame.core/subscribe","~$re-frame.std-interceptors/db-handler->interceptor","~$re-frame.core/trim-v","~$cljs.core/reset!","~$re-frame.registrar/register-handler","~$re-frame.subs/clear-subscription-cache!","~$re-frame.subs/kind","~$re-frame.core/reg-fx","~$re-frame.core/purge-event-queue","~$re-frame.core/get-effect","~$re-frame.std-interceptors/enrich","~$re-frame.subs/subscribe","~$re-frame.core/clear-cofx","~$re-frame.core/reg-event-ctx","~$re-frame.std-interceptors/ctx-handler->interceptor","~$re-frame.core/reg-event-fx","~$re-frame.interceptor/assoc-coeffect","~$re-frame.core/clear-fx","~$re-frame.cofx/reg-cofx","~$re-frame.cofx/inject-cofx","~$re-frame.std-interceptors/fx-handler->interceptor","~$re-frame.subs/reg-sub","~$re-frame.cofx/kind","~$re-frame.core/register-handler","~$re-frame.router/dispatch-sync","~$re-frame.std-interceptors/after","~$re-frame.router/add-post-event-callback","~$re-frame.core/->interceptor","~$re-frame.core/inject-cofx","~$cljs.core/next","~$re-frame.core/set-loggers!","~$re-frame.interceptor/get-coeffect","~$re-frame.core/make-restore-fn","~$re-frame.interceptor/assoc-effect","~$re-frame.core/clear-subscription-cache!","~$re-frame.core/reg-sub","~$re-frame.cofx/inject-db","~$re-frame.router/event-queue","~$re-frame.std-interceptors/path","~$re-frame.core/console","~$re-frame.router/remove-post-event-callback","~$re-frame.core/reg-cofx","~$re-frame.router/dispatch","~$re-frame.core/path","~$re-frame.core/enqueue","~$re-frame.core/debug","~$js/Error","~$re-frame.std-interceptors/on-changes","~$re-frame.registrar/kind->id->handler","~$cljs.core/chunked-seq?","~$re-frame.core/after"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1K","reagent/impl/batching.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","~$reagent.debug","~$reagent.impl.util"]]],["^1K","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.dom.HtmlElement"]]],["^1K","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.labs.userAgent.util","~$goog.string"]]],["^1K","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.array","~$goog.asserts"]]],["^1K","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^46","~$goog.object","~$goog.string.internal"]]],["^1K","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4;"]]],["^1K","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^Q"]]],["^1K","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49"]]],["^3W","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1K","reagent/impl/util.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^43","~$clojure.string"]]],["^1K","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^46","~$goog.reflect","^47"]]],["^1K","re_frame/router.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^W","^M","^Y","~$re-frame.trace"]]],["^1K","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","re_frame/registrar.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^M","^Y"]]],["^1K","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^3W","node_modules/scheduler/cjs/scheduler.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","f3053a44b61bb3278782ca56c8dcc410f1944dc1","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40"]]],["^1K","reagent/ratom.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^44","^43","~$reagent.impl.batching","^Q","^4:"]]],["^3W","node_modules/scheduler/cjs/scheduler.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4a53b69f29acae19788e3e2f50c92f8d588f5c78","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40"]]],["^1K","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1K","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^3W","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","12c2587c156a560ed636c6e3cd1c0a7dc69d31e0","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40"]]],["^3W","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1K","shadow/js.js"],["13e6d579ee96996286c70df42974bdb936037123","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","reagent/impl/template.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^?","^4C","~$clojure.walk","^44","~$reagent.impl.component","^4I","^4L","^43","^4:"]]],["^1K","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49"]]],["^3W","node_modules/react-dom/cjs/react-dom.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","db8259775ecd7012ed94e61ee3adc97de9522104","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1608738513000,1608738513000,1561026596000],["^3W","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","87a015cdc96b5a16d98a3d5c344d21accc58dadd","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","^4Q","~$module$node_modules$prop_types$checkPropTypes"]]],["^1K","re_frame/events.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^15","~$re-frame.utils","^M","^Z","^Y","^T","^4H"]]],["^1K","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","^4G"]]],["^1K","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","~$goog.html.trustedtypes","^4>","^4?","^4@","^4A"]]],["^1K","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^3W","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","9028fd288ab5a39d86fa3b5f3e9b09bad420d4f6","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40"]]],["^1K","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","~$goog.html.SafeUrl","^4@","^4A","^4;"]]],["^1K","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4W","^4=","~$goog.html.uncheckedconversions","^4@","^4;"]]],["^1K","reagent/impl/component.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^4:","^?","^44","^4I","^4L","^43"]]],["^1K","clojure/walk.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^["]]],["^1K","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1K","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","~$goog.dom.TagName","~$goog.dom.tags","^4[","^50","~$goog.html.SafeStyleSheet","^4W","^4=","^4V","^4>","^4?","^4D","^4:","^4@","^4A","^4;"]]],["^1K","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^4:"]]],["^1K","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^3W","node_modules/scheduler/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","408126fc2241739168bcaf5965ae56a7df143144","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1K","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^46","^47"]]],["^1K","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^54","~$goog.dom.safe","^4Z","^51","~$goog.math.Coordinate","~$goog.math.Size","^4:","^47","~$goog.string.Unicode","~$goog.userAgent"]]],["^1K","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.debug.Error","^5:"]]],["^1K","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","^47","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^3W","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40"]]],["^1K","re_frame/db.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^M"]]],["^1K","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",[]]],["^1K","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^4:"]]],["^1K","clojure/string.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^47","~$goog.string.StringBuffer"]]],["^1K","re_frame/cofx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^15","^T","^Z","^Y"]]],["^3W","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","7e2672a2ef583715727d174c8812a70391258842","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","^4Q"]]],["^1K","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49"]]],["^1K","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^5;","^51","^4@","^4;"]]],["^1K","re_frame/interceptor.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^Y","^M","^4H","^Q"]]],["^1K","clojure/data.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^Q"]]],["^1K","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^4;"]]],["^1K","reagent/core.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^?","~$reagent.impl.template","^4P","^44","^4I","^4L","^43","~$reagent.dom"]]],["^1K","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.math"]]],["^1K","re_frame/std_interceptors.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^T","^Y","^Z","^15","~$clojure.data","^S","^4U","^4H"]]],["^1K","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","^4Y","^5I"]]],["^1K","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.debug.entryPointRegistry","~$goog.dom","^54","^5;","^4Y","^4Z","^4=","^4D","^4E","^4@"]]],["^1K","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","^4Z","^4[","^50","^56","^4W","^4=","^4@","^4;"]]],["^1K","re_frame/utils.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^Y"]]],["^1K","reagent/dom.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^A","^44","^5G","^4I","^4L","^43"]]],["^1K","re_frame/fx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^13","^15","^T","^M","^W","^Z","^Y","^4H"]]],["^3W","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40"]]],["^1K","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11"]]],["^1K","cljs/core.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","~$goog.math.Long","~$goog.math.Integer","^47","^4:","^48","~$goog.Uri","^5F"]]],["^1K","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","^4V","^4@","^4A"]]],["^1K","reagent/debug.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^["]]],["^1K","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","^50","^4:","^4@","^4A","^4;"]]],["^1K","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^4G"]]],["^1K","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^5?"]]],["^3W","node_modules/scheduler/tracing.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^3W","node_modules/react-dom/cjs/react-dom.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","75942e2c51d78023c06fc0e51bb6fca0fea291b1","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^40","^?","^4Q","^4T","^4R","~$module$node_modules$scheduler$tracing"]]],["^1K","clojure/set.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^["]]],["^1K","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^48","^49","^47"]]],["^1K","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^49","^4A"]]],["^1K","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^M","^Y","^4Y"]]],["^1K","re_frame/subs.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^15","^M","^Y","^4U","^Z","^4H"]]],["^1K","re_frame/core.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3X",["^ ","^3Y",null,"^3Z",["^F",[]],"^3[",["^11","^[","^W","^O","^M","^15","^V","^S","^13","^Y","^Z","^T","^18","^Q"]]]]],"~:clj-info",["^ ","jar:file:/home/victor/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/debug.clj",1580720293000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1602861476000,"jar:file:/home/victor/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/core.clj",1580720293000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1561026596000,"jar:file:/home/victor/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1588591260000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1602861476000,"jar:file:/home/victor/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1602861476000,"jar:file:/home/victor/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1561026614000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1555623369000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/ratom.clj",1580720293000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1569660114000,"jar:file:/home/victor/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1561026596000,"jar:file:/home/victor/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1602063594000,"jar:file:/home/victor/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1588591260000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^O","^P","^Q","^R","^S","^T","^T","^U","^V","^W","^W","^X","^Y","^V","^V","^Z","^Z","^[","^[","^10","^T","^11","^11","^12","^13","^14","^15","^16","^Z","^13","^13","^Q","^Q","^17","^W","^18","^18","^Y","^Y","^O","^O","^19","^M","^1:","^18","^S","^S","^15","^15"],"^1;",["^F",["^1<"]],"~:shadow/js-access-global",["^F",["Error"]],"^1=",["^ ","^1>","^18","^1?","^18","^1@","^18"],"~:defs",["^ ","~$console",["^ ","^G","^3I","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^G","^2=","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^G","^2C","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1C",["~$quote",["^1C",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^G","^2K","^6","re_frame/core.cljc","^:",18,"~:method-params",["^1C",[["^6Q","^6R"]]],"~:protocol-impl",null,"~:arglists-meta",["^1C",[null,null]],"^8",1,"~:variadic?",false,"^7",51,"~:ret-tag","~$any","^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^6O",["^1C",["^6P",["^1C",[["^6Q","^6R"]]]]],"^6S","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^G","^2N","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^G","^25","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^6O",["^1C",["^6P",["^1C",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^6W",true,"~:fixed-arity",0,"^6Z",0,"^6T",[["^1C",["^73"]]],"^6O",["^1C",[["~$&","^73"]]],"^6V",["^1C",[null]]]],"^G","^24","^6","re_frame/core.cljc","^:",19,"^74",["^ ","^6W",true,"^75",0,"^6Z",0,"^6T",[["^1C",["^73"]]],"^6O",["^1C",[["~$&","^73"]]],"^6V",["^1C",[null]]],"^6T",[["^1C",["^73"]]],"^6U",null,"^75",0,"^6V",["^1C",[null]],"^8",1,"^6W",true,"~:methods",[["^ ","^75",0,"^6W",true,"~:tag","^6Y"]],"^7",234,"^6X","^6Y","^9",234,"^6Z",0,"^6[",true,"^6O",["^1C",[["~$&","^73"]]]],"~$purge-event-queue",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^6O",["^1C",["^6P",["^1C",[[]]]]],"^6S","Remove all events queued for processing"],"^G","^2V","^6","re_frame/core.cljc","^:",24,"^6T",["^1C",[[]]],"^6U",null,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^7",194,"^6X","^6Y","^9",194,"^6Z",0,"^6[",true,"^6O",["^1C",["^6P",["^1C",[[]]]]],"^6S","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^6O",["^1C",["^6P",["^1C",[["~$id"]]]]]],"^G","^1Y","^6","re_frame/core.cljc","^:",33,"^6T",["^1C",[["^7:"]]],"^6U",null,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^7",222,"^6X","^6Y","^9",222,"^6Z",1,"^6[",true,"^6O",["^1C",["^6P",["^1C",[["^7:"]]]]]],"~$path",["^ ","^G","^3M","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^G","^3E","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^6O",["^1C",["^6P",["^1C",[[]]]]],"^6S","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^G","^3B","^6","re_frame/core.cljc","^:",22,"^6T",["^1C",[[]]],"^6U",null,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^7",169,"^6X","~$function","^9",169,"^6Z",0,"^6[",true,"^6O",["^1C",["^6P",["^1C",[[]]]]],"^6S","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^G","^33","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"^77","^7>"],"~$get-effect",["^ ","^G","^2W","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^6O",["^1C",["^6P",["^1C",[["^7:","~$handler"],["^7:","~$interceptors","^7B"]]]]],"^6S","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^74",["^ ","^6W",false,"^75",3,"^6Z",3,"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6V",["^1C",[null,null]]]],"^G","^2J","^6","re_frame/core.cljc","^:",19,"^74",["^ ","^6W",false,"^75",3,"^6Z",3,"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6V",["^1C",[null,null]]],"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6U",null,"^75",3,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^76",[["^ ","^75",2,"^6W",false,"^77","^6Y"],["^ ","^75",3,"^6W",false,"^77","^6Y"]],"^7",71,"^9",71,"^6Z",3,"^6[",true,"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6S","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^G","^2L","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^G","^23","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^77","^7>"],"~$->interceptor",["^ ","^G","^3=","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^G","^3@","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^G","^3>","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^G","^2F","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^G","^3O","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^77","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^G","^2G","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^G","^3N","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^G","^2Z","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^77","^7>"],"~$reg-event-ctx",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^6O",["^1C",["^6P",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]]]],"^6S","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^74",["^ ","^6W",false,"^75",3,"^6Z",3,"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6V",["^1C",[null,null]]]],"^G","^2[","^6","re_frame/core.cljc","^:",20,"^74",["^ ","^6W",false,"^75",3,"^6Z",3,"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6V",["^1C",[null,null]]],"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6U",null,"^75",3,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^76",[["^ ","^75",2,"^6W",false,"^77","^6Y"],["^ ","^75",3,"^6W",false,"^77","^6Y"]],"^7",104,"^9",104,"^6Z",3,"^6[",true,"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6S","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^G","^2U","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^G","^2P","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^77","^7K"],"~$clear-sub",["^ ","^G","^20","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^77","^7>"],"~$dispatch",["^ ","^G","^2;","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^G","^3T","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^6O",["^1C",["^6P",["^1C",[["~$f"],["^7:","~$f"]]]]],"^6S","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^74",["^ ","^6W",false,"^75",2,"^6Z",2,"^6T",["^1C",[["~$f"],["^7:","~$f"]]],"^6O",["^1C",[["~$f"],["^7:","~$f"]]],"^6V",["^1C",[null,null]]]],"^G","^1X","^6","re_frame/core.cljc","^:",30,"^74",["^ ","^6W",false,"^75",2,"^6Z",2,"^6T",["^1C",[["~$f"],["^7:","~$f"]]],"^6O",["^1C",[["~$f"],["^7:","~$f"]]],"^6V",["^1C",[null,null]]],"^6T",["^1C",[["~$f"],["^7:","~$f"]]],"^6U",null,"^75",2,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^76",[["^ ","^75",1,"^6W",false,"^77","^6Y"],["^ ","^75",2,"^6W",false,"^77","^6Y"]],"^7",201,"^9",201,"^6Z",2,"^6[",true,"^6O",["^1C",[["~$f"],["^7:","~$f"]]],"^6S","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^G","^3K","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^6O",["^1C",["^6P",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]]]],"^6S","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^74",["^ ","^6W",false,"^75",3,"^6Z",3,"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6V",["^1C",[null,null]]]],"^G","^31","^6","re_frame/core.cljc","^:",19,"^74",["^ ","^6W",false,"^75",3,"^6Z",3,"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6V",["^1C",[null,null]]],"^6T",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6U",null,"^75",3,"^6V",["^1C",[null,null]],"^8",1,"^6W",false,"^76",[["^ ","^75",2,"^6W",false,"^77","^6Y"],["^ ","^75",3,"^6W",false,"^77","^6Y"]],"^7",87,"^9",87,"^6Z",3,"^6[",true,"^6O",["^1C",[["^7:","^7B"],["^7:","^7C","^7B"]]],"^6S","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^6N",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^6O",["^1C",["^6P",["^1C",[["~$&","^73"]]]]],"^74",["^ ","^6W",true,"^75",0,"^6Z",0,"^6T",[["^1C",["^73"]]],"^6O",["^1C",[["~$&","^73"]]],"^6V",["^1C",[null]]]],"^G","^39","^6","re_frame/core.cljc","^:",23,"^74",["^ ","^6W",true,"^75",0,"^6Z",0,"^6T",[["^1C",["^73"]]],"^6O",["^1C",[["~$&","^73"]]],"^6V",["^1C",[null]]],"^6T",[["^1C",["^73"]]],"^6U",null,"^75",0,"^6V",["^1C",[null]],"^8",1,"^6W",true,"^76",[["^ ","^75",0,"^6W",true,"^77","^6Y"]],"^7",229,"^6X","^6Y","^9",229,"^6Z",0,"^6[",true,"^6O",["^1C",[["~$&","^73"]]]],"~$clear-subscription-cache!",["^ ","^G","^3D","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1A",["^ ","^[","^["],"~:cljs.analyzer/constants",["^ ","^1;",["^F",["~:warn"]],"~:order",["^7["]],"^1G",["^ ","^1<",["^F",[]]],"^1H",["^ "],"^1I",["^11","^[","^W","^O","^M","^15","^V","^S","^13","^Y","^Z","^T","^18","^Q"]],"^J","^H","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^3V",[["^83","~:static-fns"],true,["^83","~:shadow-tweaks"],null,["^83","~:source-map-inline"],null,["^83","~:elide-asserts"],false,["^83","~:optimize-constants"],null,["^83","^1N"],null,["^83","~:external-config"],null,["^83","~:tooling-config"],null,["^83","~:emit-constants"],null,["^83","~:load-tests"],null,["^83","~:form-size-threshold"],null,["^83","~:data-readers"],null,["^83","~:infer-externs"],"~:auto",["^83","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^83","~:fn-invoke-direct"],null,["^83","~:source-map"],"/dev/null"]]]